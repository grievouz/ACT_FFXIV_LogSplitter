<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Advanced Combat Tracker</name>
    </assembly>
    <members>
        <member name="M:Advanced_Combat_Tracker.ActLoader.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActLoader.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ActLoader.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.ActLoader.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ActGlobals">
            <summary>
            A static data object for ACT to talk to other forms and store common data
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ActGlobals.ActLocalization">
            <summary>
            Contains strings that can be localized in ACT
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ActGlobals.ActLocalization.LocalizationStringsHelper">
            <summary>
            A safe accessor for ActLocalization.LocalizationStrings.
            Usage:
            var Trans = new ActGlobals.ActLocalization.LocalizationStringsHelper();
            string s = Trans[\"localizationKey\"];	// Will return \"localizationKey\" if the key is not found and write a message in ACT's log.
            Trans[\"localizationKey\"] = \"Translated text\";
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ActGlobals.ActLocalization.Init">
            <summary>
            Do not call this method as a plugin as it will reset all strings
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.mainTableShowCommas">
            <summary>
            If tables in the main tab will show thousand separators
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.calcRealAvgDelay">
            <summary>
            If when calculating average delay, multiple hits in a second should be grouped together as a single hit, thus reducing the divisor
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.longDuration">
            <summary>
            If heals can extend the duration of an encounter
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.wallClockDuration">
            <summary>
            If active encounters can have their duration extend past their last allied action by referencing LastEstimatedTime(wall clock)
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.blockIsHit">
            <summary>
            If a "No Damage" attack counts as a hit in percentage calculations
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.restrictToAll">
            <summary>
            If non-Ref marked DamageType objects should fully populate or not
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.charName">
            <summary>
            Currently known 1st person character
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.eDSort">
            <summary>
            Encounter View sorting method
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.mDSort">
            <summary>
            DamageType View sorting method
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.aTSort">
            <summary>
            AttackType View sorting method
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.eDSort2">
            <summary>
            Encounter view second sorting method
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.mDSort2">
            <summary>
            DamageType view second sorting method
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.aTSort2">
            <summary>
            AttackType view second sorting method
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.disableIncrementalCaching">
            <summary>
            This will disable the new incremental caching for encounter tables and mini parse exports.  Only use this if real-time calculations are different than imported encounters.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormActMain">
            <summary>
            Main form instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormMiniParse">
            <summary>
            Mini window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormUpdater">
            <summary>
            Updater window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormCombatantSearch">
            <summary>
            Combatant search instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormResistsDeathReport">
            <summary>
            Resist/Death Report window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormSpellRecastCalc">
            <summary>
            Spell recast calc window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormSpellTimers">
            <summary>
            Spell Timer options window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormSpellTimersPanel">
            <summary>
            Spell Timer panel window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormSpellTimersPanel2">
            <summary>
            Spell Timer panel window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormEncounterLogs">
            <summary>
            Encounter Logs window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormPerformanceWizard">
            <summary>
            Performance Wizard window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormXmlSettingsIO">
            <summary>
            Export XML settings window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormTimeLine">
            <summary>
            Timeline window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormEncounterVcr">
            <summary>
            Encounter VCR window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormSqlQuery">
            <summary>
            SQL Query window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormByCombatantLookup">
            <summary>
            DamageType by Combatant reverse lookup window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormStartupWizard">
            <summary>
            Startup Wizard window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormGetPlugins">
            <summary>
            Get Plugins window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormAlliesEdit">
            <summary>
            Allies Edit window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormAvoidanceReport">
            <summary>
            Avoidance Report window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormExportFormat">
            <summary>
            Export Formatting window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormImportProgress">
            <summary>
            Import Progress window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormScratchRange">
            <summary>
            Custom Encounter time range selector window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oFormCustomTriggerBenchmark">
            <summary>
            Custom Trigger Benchmarking window instance handle
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActGlobals.oActLoader">
            <summary>
            The entry/exit form
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CheckboxPopup.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CheckboxPopup.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.CheckboxPopup.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ColorControl.ColorSettingEventDelegate">
            <summary>
            When the color setting that is being stored has changed
            </summary>
            <param name="NewColor">The font that will be used</param>
        </member>
        <member name="E:Advanced_Combat_Tracker.ColorControl.ForeColorSettingChanged">
            <summary>
            When the forecolor setting that is being stored has changed
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ColorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ColorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.ColorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FontColorControl.FontSettingEventDelegate">
            <summary>
            When the font setting that is being stored has changed
            </summary>
            <param name="NewFont">The font that will be used</param>
        </member>
        <member name="E:Advanced_Combat_Tracker.FontColorControl.FontSettingChanged">
            <summary>
            When the font setting that is being stored has changed
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FontColorControl.ColorSettingEventDelegate">
            <summary>
            When the color setting that is being stored has changed
            </summary>
            <param name="NewColor">The font that will be used</param>
        </member>
        <member name="E:Advanced_Combat_Tracker.FontColorControl.ForeColorSettingChanged">
            <summary>
            When the forecolor setting that is being stored has changed
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FontColorControl.BackColorSettingChanged">
            <summary>
            When the forecolor setting that is being stored has changed
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FontColorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FontColorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FontColorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormActMain">
            <summary>
            The main ACT form
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.PlaySoundMethod">
            <summary>
            A replacable method that will handle sound output.  Save this to a local variable if you plan on restoring the ACT default later.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormActMain.PlaySoundDelegate">
            <summary>
            A replacable method that will handle sound output
            </summary>
            <param name="WavFilePath">The file path to the sound to play</param>
            <param name="VolumePercent">0-100 volume</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.PlayTtsMethod">
            <summary>
            A replacable method that will handle Text to Speech.  Save this to a local variable if you plan on restoring the ACT default later.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormActMain.PlayTtsDelegate">
            <summary>
            A replacable method that will handle Text to Speech
            </summary>
            <param name="TtsString">The text that will be converted to speech</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PlaySound(System.String)">
            <summary>
            Plays a PCM wave file using the currently selected implementation in <see cref="F:Advanced_Combat_Tracker.FormActMain.PlaySoundMethod"/>.
            </summary>
            <param name="pszSound">File path to WAV</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.TTS(System.String)">
            <summary>
            Performs Text to Speech using the currently selected implementation in <see cref="F:Advanced_Combat_Tracker.FormActMain.PlayTtsMethod"/>.  (Default ACT implementation uses a intermediary WAV file to avoid buggy cutoffs during high CPU usage)
            </summary>
            <param name="SpeechText">Text to be spoken</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.CornerControlAdd(System.Windows.Forms.Control)">
            <summary>
            Add a control to the upper-right corner of ACT.  Avoid heights greater than 24px
            </summary>
            <param name="CornerControl">Forms control to add</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.CornerControlRemove(System.Windows.Forms.Control)">
            <summary>
            Remove a control reference from the corner controls layout
            </summary>
            <param name="CornerControl"></param>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.KnownActAssemblyNames">
            <summary>
            ACT will warn the user if ACT's folder contains assemblies not on this list.  This is to curtail the bad practice of putting plugins in the default search path.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetVersion">
            <summary>
            Gets the current version of ACT
            </summary>
            <returns>A Version object</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.RestartACT(System.Boolean,System.String)">
            <summary>
            Prompts the user to restart ACT with a non-blocking message.  (thread-safe)
            </summary>
            <param name="ShowIgnoreButton">The user can dismiss the prompt.</param>
            <param name="AdditionalInfo">Message that will be appended to the restart request.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SetOptionsHelpText(System.String)">
            <summary>
            Sets the the text of the help panel in the Options tab
            </summary>
            <param name="Text">Text to display, or String.empty for default</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SetIoHelpText(System.String)">
            <summary>
            Sets the the text of the help panel in the Import/Export tab
            </summary>
            <param name="Text">Text to display, or String.empty for default</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginCornerControlAdd(System.Windows.Forms.Control)">
            <summary>
            Add a control to the upper-right corner of the Plugin Listing tab.  Avoid heights greater than 22px
            </summary>
            <param name="CornerControl">Forms control to add</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginCornerControlRemove(System.Windows.Forms.Control)">
            <summary>
            Remove a control reference from the plugin corner controls layout
            </summary>
            <param name="CornerControl"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.NotificationAdd(System.String,System.String,System.EventHandler,System.Object)">
            <summary>
            Add a notification to the main window Notifications tab
            </summary>
            <param name="TitleText">Notification title</param>
            <param name="MessageText">Notification body message</param>
            <param name="ShowCallback">Event handler to execute when the Show button is clicked</param>
            <param name="SenderObject">Object sent as the sender for the event</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.AppDataFolder">
            <summary>
            ACT's application data folder for logs, config files, etc...  %APPDATA%\Advanced Combat Tracker\
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.MainTreeView">
            <summary>
            The TreeView object of the main window.  You should not navigate through the nodes to enumerate things as the node collection is populated dynamically as nodes are expanded
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.GlobalTimeSorter">
            <summary>
            Used to sort log entries of the same timestamp and match up events with log lines in the View Logs window
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.TemporaryFolder">
            <summary>
            The temp folder that ACT uses.  May be in %TEMP%.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.InitActDone">
            <summary>
            Evaluates to true if ACT has finished initializing
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.OptionsControlSets">
            <summary>
            Contains the controls to be visible given a certain Node.FullPath of OptionsTreeView
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.OptionsTreeView">
            <summary>
            The TreeView for the Options tab
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.IoControlSets">
            <summary>
            Contains the controls to be visible given a certain Node.FullPath of IoTreeView
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.IoTreeView">
            <summary>
            The TreeView for the Import/Export tab
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetEncounterDataColumns(System.Boolean)">
            <summary>
            Gets a list of column names(Usable in GetColumnByName()) for the Encounter view table
            </summary>
            <param name="RestrictToVisible">If only to return columns that are visible</param>
            <returns>Column names</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetCombatantDataColumns(System.Boolean)">
            <summary>
            Gets a list of column names(Usable in GetColumnByName()) for the Combatant view table
            </summary>
            <param name="RestrictToVisible">If only to return columns that are visible</param>
            <returns>Column names</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetDamageTypeDataColumns(System.Boolean)">
            <summary>
            Gets a list of column names(Usable in GetColumnByName()) for the DamageType view table
            </summary>
            <param name="RestrictToVisible">If only to return columns that are visible</param>
            <returns>Column names</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetAttackTypeColumns(System.Boolean)">
            <summary>
            Gets a list of column names(Usable in GetColumnByName()) for the AttackType view table
            </summary>
            <param name="RestrictToVisible">If only to return columns that are visible</param>
            <returns>Column names</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.GameMacroFolder">
            <summary>
            The base folder where ACT generated macro exports should go.  In EQ2 this is simply the base game folder.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SendToMacroFile(System.String,System.String,System.String)">
            <summary>
            Sends a text file to the EQ2 folder
            </summary>
            <param name="ExportFilePath">The filename of the file to create/replace</param>
            <param name="FileContents">The contents of the file to create/replace</param>
            <param name="LinePrefix">String to be prefixed to each newline</param>
            <returns>If successful.  If false and no exceptions were thrown, ACT could not locate EQ2's folder.</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.ActiveCustomTriggers">
            <summary>
            Gets a list of Custom Triggers currently enabled
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.CustomTriggers">
            <summary>
            All current Custom Trigger Definitions
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.ActPlugins">
            <summary>
            List of plugins shown in the UI.  Call PluginsApplyOrderToUI() if modified.  Avoid adding or removing entries, only reorder.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginsApplyOrderToUI">
            <summary>
            Reads the ActPlugins List and reorders the GUI plugins page.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.EncountersToXml(System.Collections.Generic.List{Advanced_Combat_Tracker.EncounterData},System.IO.Stream,System.Boolean)">
            <summary>
            Outputs Encounters as XML CombatActions
            </summary>
            <param name="InputEncounters">The EncounterData objects to export</param>
            <param name="OutputStream">A writable stream such as a FileStream or MemoryStream</param>
            <param name="ExportLogLines">If the output XML should include a LogLines section</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.XmlToEncounters(System.IO.Stream)">
            <summary>
            Parses an XML stream created by EncountersToXml()
            </summary>
            <param name="InputXmlStream">An open stream such as a FileStream or MemoryStream</param>
            <returns>EncounterData objects created by parsing the XML</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ValidateLists">
            <summary>
            Makes sure that the ACT options pages list all of the available columns.  (Drop down selectors)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LogFileFilter">
            <summary>
            The file filter to use in order to find log files, such as "eq2log*.txt"
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LogFileParentFolderName">
            <summary>
            The base logs folder name.  This is used to determine if the folder one or more levels up is the base log folder or hidden through a UNC path share
            For example, the log file is C:\EQ2\Logs\Permafrost\eq2log_Aditu.txt
            If "Logs" is entered here, ACT will search all sub-folders of Logs for updated log files.
            In the case that the file path of the currently open file does not contain this value, like a UNC share path, ACT will not look farther than the current folder for log files.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ResetCheckLogs">
            <summary>
            Resets the file watcher to use current settings and enables it if the associated checkbox allows.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetCompanionFilePath(System.String,System.String)">
            <summary>
            Creates a file path of a Companion Log file given a Main Log file and Companion name
            </summary>
            <param name="MainLogPath">The file path of the currently open log</param>
            <param name="CompanionLogName">The suffix name to add to the main log name</param>
            <returns>Returns the full path for a Companion Log to be created</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.OpenLog(System.Boolean,System.Boolean)">
            <summary>
            Aborts the current log reading thread and opens the log file specified in the LogFilePath property
            </summary>
            <param name="GetCurrentZone">Setting this to false will skip ACT parsing the opening log file for the current zone</param>
            <param name="GetCharNameFromFile">If the character name should be set according to the file name</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.WriteExceptionLog(System.Exception,System.String)">
            <summary>
            Writes an exception to ACT's default error log
            </summary>
            <param name="ex">The exception's object handle</param>
            <param name="MoreInfo">An optional header description of where the exception occurred</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.WriteInfoLog(System.String)">
            <summary>
            Writes an informational message to the error log
            </summary>
            <param name="LogMessage"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.WriteDebugLog(System.String)">
            <summary>
            Writes debugging information to the error log *if* ACT was started with the -debug switch.
            </summary>
            <param name="LogMessage"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SelectiveListAdd(System.String)">
            <summary>
            Add a player to the Selective Parsing list; checkmarked
            </summary>
            <param name="Player">Combatant name to add</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SelectiveListRemove(System.String,System.Boolean)">
            <summary>
            Remove a player from the Selective Parsing list; unchecking or removing
            </summary>
            <param name="Player">Combatant name to remove</param>
            <param name="RemoveEntry">If the entire entry should be removed instead of unchecked</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SelectiveListClear">
            <summary>
            Completely clears the Seletive Parsing list
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SelectiveListUncheckAll">
            <summary>
            Unchecks all combatants in the Selective Parsing list
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SelectiveListGetSelected(System.String)">
            <summary>
            Determines if a combatant is in the Selective Parsing list and checkmarked
            </summary>
            <param name="Player">The combatant name to query</param>
            <returns>If in the list and checkmarked</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.UpdateMiniEnc">
            <summary>
            Immediately force an update to the Mini Window
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.TextExportFormatterRegex">
            <summary>
            This regex must split apart a text export formatting string into matches containing an export formatter or plain text
            If a match is a formatting variable, it must be put into the "formatter" capture group
            If a match is plain text, it must be put into the "text" capture group
            
            What is left and right of the "formatter" must be assigned to TextExportFormatterCap1 and TextExportFormatterCap2 respectively
            Default is: "{(?&lt;formatter&gt;[^}]+)}|(?&lt;text&gt;[^{]+)"
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.TextExportFormatterCap1">
            <summary>
            The left mark that offsets a text export format variable such as '{' or '&lt;format&gt;'
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.TextExportFormatterCap2">
            <summary>
            The right mark that offsets a text export format variable such as '}' or '&lt;/format&gt;'
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.Portable">
            <summary>
            If ACT started in Portable mode and is trying to keep files out of %APPDATA%/%TEMP%
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetTextExport(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a text export of an encounter using formatters
            </summary>
            <param name="ZoneListIndex">Zero based index of the ZoneData object</param>
            <param name="EncounterListIndex">Zero based index of the EncounterData object</param>
            <param name="FormatIndex">Which formatter preset in property ClipFormats to use.</param>
            <returns>The encounter text export</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetTextExport(System.Int32,System.Int32,System.Int32,System.Drawing.Font,System.Int32)">
            <summary>
            Gets a text export of an encounter using formatters and column alignment
            </summary>
            <param name="ZoneListIndex">Zero based index of the ZoneData object</param>
            <param name="EncounterListIndex">Zero based index of the EncounterData object</param>
            <param name="FormatIndex">Which formatter preset in property ClipFormats to use.</param>
            <param name="TabulateFont">The font used to determine column alignment</param>
            <param name="MaxLines">Maximum number of newlines allowed before truncating</param>
            <returns>The encounter text export</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetTextExport(System.Int32,System.Int32,Advanced_Combat_Tracker.TextExportFormatOptions)">
            <summary>
            Gets a text export of an encounter using formatters
            </summary>
            <param name="ZoneListIndex">Zero based index of the ZoneData object in property ZoneList</param>
            <param name="EncounterListIndex">Zero based index of the EncounterData object</param>
            <param name="ExportFormatting">An object that holds formatting information</param>
            <returns>The encounter text export</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetTextExport(Advanced_Combat_Tracker.EncounterData,Advanced_Combat_Tracker.TextExportFormatOptions)">
            <summary>
            Gets a text export of an encounter using formatters
            </summary>
            <param name="Encounter">The encounter that contains data to export</param>
            <param name="ExportFormatting">An object that holds formatting information</param>
            <returns>The encounter text export</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.MemCompressGZip(System.Byte[])">
            <summary>
            Compresses an array of bytes with GZip/DEFLATE
            </summary>
            <param name="InputBytes">Raw input</param>
            <returns>Compressed bytes with a GZip file header</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.MemDecompressGzip(System.Byte[])">
            <summary>
            Uncompresses an array of bytes compressed with GZip/DEFLATE
            </summary>
            <param name="CompressedBytes">Compressed bytes including a GZip header</param>
            <returns>Raw uncompressed bytes</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SendToClipboard(System.String,System.Boolean)">
            <summary>
            Sends text to the Windows Clipboard in three different ways, if any previous one fails.  Also may send clipboard data to the ACT Clipboard Sharer if connected.
            </summary>
            <param name="text">Text to be put into the clipboard</param>
            <param name="CopyLocal">If the ACT Clipboard Sharer is active, text will not be stored on the local clipboard unless this is set to true.  Else this has no effect.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SendHtmlToClipboard(System.String)">
            <summary>
            Sends HTML formatted data to the clipboard in plain text format and CF_HTML format, which can be viewed with WYSIWYG applications.
            </summary>
            <param name="html">HTML to send to the clipboard.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PlayExportSound">
            <summary>
            Plays the sound configured in Options -> Sound -> Export sound
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PlayMiscSound">
            <summary>
            Plays the sound configured in Options -> Sound -> Misc sound
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PlayCommandSound(System.String)">
            <summary>
            Plays the sound configured in Options -> Sound -> Command sound
            </summary>
            <param name="Command">If TTS is selected, this command string is spoken</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ResizeLVCols(System.Windows.Forms.ListView)">
            <summary>
            Resizes the columns on a ListView depending on the column header length and column content length
            </summary>
            <param name="listview">An already populated ListView to have columns resized</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.UnZip(System.String,System.String)">
            <summary>
            Unzips a file to a folder
            </summary>
            <param name="ZipArchive">File path of the ZIP files</param>
            <param name="DestinationFolder">Absolute path to extract the files to</param>
            <returns>A listing of the files extracted</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginGetGithubApi(System.Int32)">
            <summary>
            Gets the GitHub API cache file of the plugin at advancedcombattracker.com (No rate limit)
            If the plugin is not GitHub hosted, this will throw an exception. 
            The cache file is updated every 3 minutes if GitHub says it needs to be.
            </summary>
            <param name="MyPluginId">The ID number the website identifies the download with</param>
            <returns>The contents of the GitHub API cache file (JSON text)</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginGetRemoteVersion(System.Int32)">
            <summary>
            Gets the version string of the plugin at advancedcombattracker.com
            </summary>
            <param name="MyPluginId">The ID number the website identifies the download with</param>
            <returns>The contents of the version file</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginGetRemoteDateUtc(System.Int32)">
            <summary>
            Gets the DateTime of the plugin at advancedcombattracker.com
            </summary>
            <param name="MyPluginId">The ID number the website identifies the download with</param>
            <returns>The modified date of the download</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginGetSelfDateUtc(Advanced_Combat_Tracker.IActPluginV1)">
            <summary>
            Gets the DateTime of the currently running plugin
            </summary>
            <param name="MyPluginInstance">The instance handle of the plugin, usually "this"</param>
            <returns>The modified date of the local plugin file</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginGetSelfData(Advanced_Combat_Tracker.IActPluginV1)">
            <summary>
            Gets the data about the current plugin instance
            </summary>
            <param name="MyPluginInstance">The instance handle of the plugin, usually "this"</param>
            <returns>A data object containing various pieces of data and controls associated with the plugin</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.PluginDownload(System.Int32)">
            <summary>
            Downloads a plugin file.  May use WININET caching if requested more than once per ACT execution.
            </summary>
            <param name="MyPluginId">The ID number the website identifies the download with</param>
            <returns>The FileInfo of the temporary file that was downloaded</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetAutomaticUpdatesAllowed">
            <summary>
            Gets whether the user preferences allow ACT to automatically check for updates
            </summary>
            <returns>The checkbox state from the About tab</returns>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.UpdateCheckClicked">
            <summary>
            Triggered when the user manually checks for ACT updates
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.TraySliderAdd(System.String,System.String)">
            <summary>
            Creates and returns a TraySlider on the UI thread with an OK button for 15 seconds and shows within 250ms
            </summary>
            <param name="Message"></param>
            <param name="Title"></param>
            <returns>The TraySlider that will appear</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.GetGraphFillColors">
            <summary>
            Gets an array of Color structures defined by the Graph Color settings
            </summary>
            <returns>28 colors</returns>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.GenerateEncounterGraph">
            <summary>
            A replaceable method which will alter graphing of the main tab
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.GenerateCombatantGraph">
            <summary>
            A replaceable method which will alter graphing of the main tab
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.GenerateDamageTypeGraph">
            <summary>
            A replaceable method which will alter graphing of the main tab
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.GenerateAttackTypeGraph">
            <summary>
            A replaceable method which will alter graphing of the main tab
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.LcdUpdate">
            <summary>
            Handle an LCD update request.  You should only handle the event if you match the ModeString.
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.LcdButtonPressed">
            <summary>
            Handle a G15 LCD button press.  You should only handle the event if you match the ModeString.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LcdCurrentMode">
            <summary>
            String representation of the currently visible LCD mode
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.UpdateLcdStatus(System.String,System.Boolean)">
            <summary>
            Writes a timestamped message to the status area of the LCD options
            </summary>
            <param name="Message">The text message</param>
            <param name="Error">If the message should be written to ACT's debug log file</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.BmpToBytes(System.Drawing.Bitmap)">
            <summary>
            A quick image to byte array converter (32bit ARGB)
            </summary>
            <param name="bmp">The image to convert</param>
            <returns>A 32bit byte array of the image.  Each pixel is 4 bytes.</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.LcdGetMonoView(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Converts a bitmap to a G15 usable byte array.  Optional scrolling.
            </summary>
            <param name="img">Bitmap image, must be 160 pixels in width</param>
            <param name="bitmapYOffset">How far down the view should be scrolled from the top of the bitmap.  The offset must allow 43 rows to remain.  IE a 160x43 bitmap's offset must be zero.</param>
            <returns>Returns an array 6880 bytes long of 0's and 255's</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.LcdGetColorView(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Converts a bitmap to a G19 usable byte array.  Optional scrolling.
            </summary>
            <param name="img">Bitmap image, must be 320 pixels in width</param>
            <param name="bitmapYOffset">How far down the view should be scrolled from the top of the bitmap.  The offset must allow 240 rows to remain.  IE a 320x240 bitmap's offset must be zero.</param>
            <returns>Returns an array 307200 bytes long of ARGB values</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.UpdateLcd(System.String,System.Boolean)">
            <summary>
            Raises an LCD update event
            </summary>
            <param name="ModeString">The label of the calling LCD mode.  This is used to determine if the event should be raised at all.
            If the calling mode is the same as the current mode, the event will be raised.</param>
            <param name="ActHighPriority">If true, the event will be raised for your mode even if that mode is not currently active.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.LcdRegisterMode(System.String)">
            <summary>
            Add a mode to the G15's LCD mode cycle
            </summary>
            <param name="ModeString">The displayed name for the mode</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.LcdUnregisterMode(System.String)">
            <summary>
            Remove a mode from the G15's LCD mode cycle
            </summary>
            <param name="ModeString">The displayed name for the mode</param>
            <returns>If successful</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.CharacterFileNameRegex">
            <summary>
            Regex used to determine the character's name from the log's file path.  The character name will be set as the first capturing group.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.TimeStampLen">
            <summary>
            The number of characters the full timestamp takes from the beginning of the line until the first character of the rest of the line
            Include spaces.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.ZoneList">
            <summary>
            Contains a list of ZoneData objects that exist in memory
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.InCombat">
            <summary>
            If ACT thinks it is currently in active combat.  It is a VERY bad idea to set this variable.  Please allow it to be set by SetEncounter() and EndCombat().
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.ActiveZone">
            <summary>
            The ZoneData object that represents the last zone an encounter was added to
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LogFilePath">
            <summary>
            Currently used log file.  To open a new log file, change this property and call OpenLog()
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.ReadThreadLock">
            <summary>
            Suspends log file reading of the currently open log file
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.BeforeLogLineRead">
            <summary>
            Every time a log line is read.  Parsing plugins should subscribe to this event.  Plugins can change the log line before OnLogLineRead subscribers see it or before it is saved in View Logs or passed to the Custom Trigger engine.
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.OnLogLineRead">
            <summary>
            Every time a log line passes through the parsing engine.  May be modified by BeforeLogLineRead subscribers.
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.OnCombatStart">
            <summary>
            When a new encounter is started, before any data is entered
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.OnCombatEnd">
            <summary>
            When an active encounter is ended
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.BeforeCombatAction">
            <summary>
            A parsed combat action before it is entered as data.  Subscribing to this event allows you to change parsed data in real time.
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.AfterCombatAction">
            <summary>
            A parsed combat action after it is entered as data.  Subscribing to this event shows the data in its final form.  Changing the action now would yield no meaningful results.
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.LogFileChanged">
            <summary>
            When a different log file is opened by ACT; manually or automatically
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.LogFileRenamed">
            <summary>
            When a log file is renamed to an archive name, typically before the old filename is re-opened as blank
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LastHostileTime">
            <summary>
            The last time SetEncounter was called by a parsing event.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LastEstimatedTime">
            <summary>
            The last known time by reading the time stamps of the log file plus the number of seconds since the last update
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LastKnownTime">
            <summary>
            The last known time by reading the time stamps of the log file
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.LogEncoding">
            <summary>
            The encoding ACT will open a log with. (Default is UTF8)  If you change this value, you should call OpenLog() for it to take effect.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.GetDateTimeFromLog">
            <summary>
            A replacable method that will parse the DateTime from a log line
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormActMain.DateTimeLogParser">
            <summary>
            A replacable method that will parse the DateTime from a log line
            </summary>
            <param name="logLine">A single line from the log</param>
            <returns>The DateTime parsed from logLine or DateTime.MinValue if failure</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ChangeZone(System.String)">
            <summary>
            Change the current zone name and update history DB
            </summary>
            <param name="ZoneName">The name of the zone being entered</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.AddCombatAction(System.Int32,System.Boolean,System.String,System.String,System.String,Advanced_Combat_Tracker.Dnum,System.DateTime,System.Int32,System.String,System.String)">
            <summary>
            Runs the parsed data through the renaming checks(Data Correction tab), raises API events, notifies the Spell Timers window and adds the data to the current encounter
            </summary>
            <param name="SwingType">The type of action.  Use "(int)SwingTypeEnum.Melee" to set as auto-attack damage for instance.</param>
            <param name="Critical">If the action was critical</param>
            <param name="Special">If the action was a bonus of some sort.  IE, double, flurry, etc.</param>
            <param name="Attacker">Source of the action</param>
            <param name="theAttackType">The name of the action or attack</param>
            <param name="Damage">The amount of damage affected by the action.</param>
            <param name="Time">The time of the action, rounded to the nearest second unless the log text specifies a better rounding.</param>
            <param name="TimeSorter">A unique sequential number to give the action for sorting purposes. (Several actions can have the same time stamp, but happen in order)  No other action currently in memory should have this specific number if you can help it.</param>
            <param name="Victim">The destination of the action</param>
            <param name="theDamageType">The type of damage the action does... IE, crushing, heat, healing, absorption, etc.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.AddCombatAction(Advanced_Combat_Tracker.MasterSwing)">
            <summary>
            Runs the parsed data through the renaming checks(Data Correction tab), raises API events, notifies the Spell Timers window and adds the data to the current encounter
            </summary>
            <param name="Action">The combat action to add to the current encounter</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.AfterCombatActionDataLock">
            <summary>
            While this object is locked, ACT will not add data to encounters.  This may prevent an encounter from ending if there is data queued.
            Usage: 
            lock(AfterCombatActionDataLock) { code here; }
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ParseRawLogLine(System.Boolean,System.DateTime,System.String)">
            <summary>
            Insert a log line into the parsing engine
            You should increment GlobalTimeSorter if you expect this line to generate combat data
            </summary>
            <param name="isImport">If the inserted log line is from an offline import instead of real-time</param>
            <param name="ParsedLogTime">The timestamp of the logfile (could be LastKnownTime if you already parsed it)</param>
            <param name="LogLine">The complete log line</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.ZoneChangeRegex">
            <summary>
            The full Regex to detect zone changes within a log file.  This is specifically used by a quick scan method to find the zone name without the normal parsing engine encountering the line.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ActCommands(System.String)">
            <summary>
            Accepts text commands to perform specific functions.
            In EQ2, if someone were to type "/act end", the parser would split apart the resulting text and send "end" to this method.
            </summary>
            <param name="commandText">The stripped down command text such as, "end", "add Player", "clip last"</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.SetEncounter(System.DateTime,System.String,System.String)">
            <summary>
            This method ensures combat actions are sent to the correct encounter instance and sets the InCombat flag.
            It also checks the Selective Parsing list to see if the action should be entered into the encounter or ignored.
            </summary>
            <param name="Time">The DateTime of the parsed action</param>
            <param name="Attacker">The source of the action</param>
            <param name="Victim">The destination of the action</param>
            <returns>True if the action should be entered as data, False if the action should be ignored.</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.EndCombat(System.Boolean)">
            <summary>
            Sets the InCombat flag to false, ends the currently active encounters, updates their treeview labels, enters the data into the history database and if applicable runs the export functions
            </summary>
            <param name="export">If the export functions such as clipboard, macro, HTML, ODBC etc should be run.  Normally this should be True.  The command itself will disable exports if it is not doing real-time parsing.</param>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.UrlRequest">
            <summary>
            Handle a client requesting a URL from ACT's web interface
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormActMain.WebIndexLinks">
            <summary>
            A collection of links to display on the web server's index page
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.UncachedFileSave(System.IO.FileInfo,System.IO.MemoryStream)">
            <summary>
            Bypass Windows disk write caching to save a file.  If the file exists, it will be deleted first.  If the file destination file already contains the data, the entire operation is skipped.
            </summary>
            <param name="DestFile">File to save to</param>
            <param name="FileData">Stream of file contents</param>
            <returns>true if the uncached save succeeded, false if normal saving was used</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.UncachedFileSave(System.IO.FileInfo,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Bypass Windows disk write caching to save a file.  If the file exists, it will be deleted first.
            </summary>
            <param name="DestFile">File to save to</param>
            <param name="FileData">Stream of file contents</param>
            <param name="Force">Will write the file even if the same contents already exist</param>
            <returns>true if the uncached save succeeded, false if normal saving was used or the file was the same</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormActMain.ValidateTableSetup">
            <summary>
            Makes sure that the ACT options pages list all of the available columns.  (Main table columns/sorters)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormActMain.SnippetShareRegex">
            <summary>
            Used to parse artbitrary log lines for XML snippet sharing.  By default it follows a EQ2 specific format for efficiency.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormActMain.XmlSnippetAddedDelegate">
            <summary>
            Event for when ACT is instructed to add the data from an XML snippet  (the XML data should be parsed and commited)
            </summary>
            <param name="sender"></param>
            <param name="e">Contains the ShareType and XmlAttributes.  Set Handled to true if the ShareType is yours</param>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormActMain.XmlSnippetAdded">
            <summary>
            Event for when ACT is instructed to add the data from an XML snippet  (the XML data should be parsed and commited)
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormCheckboxPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCheckboxPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCheckboxPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomTriggerBenchmark.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormGetPlugins.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormGetPlugins.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormGetPlugins.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormGetPlugins.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormGetPlugins.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormGetPlugins.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormGetPlugins.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormImportProgress.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormImportProgress.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormImportProgress.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormImportProgress.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormImportProgress.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormImportProgress.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormImportProgress.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomEncRange.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomEncRange.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomEncRange.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomEncRange.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormCustomEncRange.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomEncRange.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCustomEncRange.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_ExportAct.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ExportAct.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ExportAct.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_ExportHtml.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ExportHtml.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ExportHtml.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_ImportAct.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ImportAct.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ImportAct.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_ImportClip.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ImportClip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ImportClip.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_ImportLog.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ImportLog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_ImportLog.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_Odbc.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_Odbc.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_Odbc.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.IO_XmlFile.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_XmlFile.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IO_XmlFile.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.NotificationHistoryItem.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.NotificationHistoryItem.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.NotificationHistoryItem.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_Color.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Color.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Color.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_ColorGraphing.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ColorGraphing.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ColorGraphing.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_ColorMisc.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ColorMisc.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ColorMisc.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_ColorUserInterface.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ColorUserInterface.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ColorUserInterface.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_DataCorrectionMisc.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_DataCorrectionMisc.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_DataCorrectionMisc.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_DataCorrectionRedirect.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_DataCorrectionRedirect.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_DataCorrectionRedirect.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_DataCorrectionRename.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_DataCorrectionRename.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_DataCorrectionRename.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_EncCulling.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_EncCulling.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_EncCulling.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_FileHTML.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_FileHTML.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_FileHTML.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_Graphing.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Graphing.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Graphing.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_ImportExport.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ImportExport.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_ImportExport.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_LcdColor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_LcdColor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_LcdColor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_LcdGeneral.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_LcdGeneral.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_LcdGeneral.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_LcdMono.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_LcdMono.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_LcdMono.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_MainTableGen.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_MainTableGen.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_MainTableGen.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_MiniParse.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_MiniParse.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_MiniParse.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_Misc.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Misc.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Misc.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_Odbc.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Odbc.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Odbc.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_SelectiveParsing.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_SelectiveParsing.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_SelectiveParsing.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_Sound.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Sound.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_Sound.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_SoundTts.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_SoundTts.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_SoundTts.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_TableAttackType.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableAttackType.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableAttackType.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_TableCombatant.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableCombatant.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableCombatant.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_TableDamageType.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableDamageType.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableDamageType.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_TableEnc.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableEnc.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableEnc.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_TextExports.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TextExports.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TextExports.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_WebServer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_WebServer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_WebServer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.TraySlider">
            <summary>
            A small message form that slides up from the lower-right corner of the screen.  By default, will wait until the foreground window is not full-screen.  Should be created/shown from a UI thread.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.TrayTitle">
            <summary>
            Label for the TraySlider's title
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.TrayText">
            <summary>
            Label for the TraySlider's message text
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.ButtonNW">
            <summary>
            Used in four button layout
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.ButtonNE">
            <summary>
            Used in four button layout
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.ButtonSW">
            <summary>
            Used in two/four button layout
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.ButtonSE">
            <summary>
            Used in two/four button layout
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.ButtonOK">
            <summary>
            One button layout
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TraySlider.ForceShow">
            <summary>
            Ignores the presence of a foreground window covering the screen
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TraySlider.#ctor">
            <summary>
            A small message form that slides up from the lower-right corner of the screen.  By default, will wait until the foreground window is not full-screen.  Should be created/shown from a UI thread.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TraySlider.ShowTraySlider(System.String,System.String)">
            <summary>
            Shows the TraySlider within 250ms
            </summary>
            <param name="Message">Message body</param>
            <param name="Title">Centered title</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.TraySlider.ShowTraySlider">
            <summary>
            Shows the TraySlider within 250ms using the set properties
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.TraySlider.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TraySlider.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.TraySlider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.OptionsDrawer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.OptionsDrawer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.OptionsDrawer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_TableZone.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableZone.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_TableZone.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ClipboardEventArgs.CopyLocal">
            <summary>
            If the clipboard content will be sent to the local clipboard regardless of it being passed to the clipboard sharer also
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.SpellTimerEventDelegate">
            <summary>
            Spell Timer Event Delegate
            </summary>
            <param name="spellTimer">The data behind the visual frame display of a spell timer</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.LcdButtonPressedEventDelegate">
            <summary>
            Lcd Button Pressed Event Delegate
            </summary>
            <param name="lcdMode">The registered string-mode that should handle this update.</param>
            <param name="lcdButton">The label of the button. Button0/Button1/Button2/Button3 or Menu/Ok/Back/Up/Down/Left/Right</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.LcdUpdateEventDelegate">
            <summary>
            Lcd Update Event Delegate
            </summary>
            <param name="lcdMode">The registered string-mode that should handle this update.</param>
            <param name="lcdInfo">The return LCD data</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.LcdUpdateEventArgs">
            <summary>
            Class containing the returned LCD data
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.LcdUpdateEventArgs.SetLcdBitmapView(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Sets the returning data of the event, which should only be done if the lcdMode is yours to handle
            </summary>
            <param name="bmp">A 160x, >=43y bitmap.  PixelFormat.Format32bppArgb
            Pixel(blue) values 0-127 will create a blank pixel.
            Pixel(blue) values 128-255 will create a filled(black) pixel.</param>
            <param name="yOffset">The amount the bitmap is scrolled down to show a 160x43 view.
            If the returned bitmap is only 160x43 in size, this should be zero.</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.UrlRequestEventDelegate">
            <summary>
            Url Handler Event Delegate
            </summary>
            <param name="urlInfo">Contains I/O data objects for the event</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.UrlRequestEventArgs">
            <summary>
            Contains I/O data objects for the event
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.UrlRequestEventArgs.url">
            <summary>
            The URL fragment requested by the client
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.UrlRequestEventArgs.headers">
            <summary>
            The HTTP headers
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.UrlRequestEventArgs.urlVars">
            <summary>
            The variables passed from the URL (Ex: http://host/url?var1=one&amp;var2=two)
            These values have not been decoded in any way
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.UrlRequestEventArgs.SetTextData(System.String,System.String)">
            <summary>
            Respond to the URL request with text data (HTML/CSS/JavaScript etc)
            </summary>
            <param name="Data">The full text document</param>
            <param name="ReturnContentType">The Content-Type header.  Ex: "text/javascript", "text/html; charset=UTF-8", etc
            If the type contains "utf-8", an UTF-8 encoded text writer will be used.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.UrlRequestEventArgs.SetBinaryData(System.Byte[],System.String)">
            <summary>
            Respond to the URL request with binary data (images, archives, etc)
            </summary>
            <param name="Data">Binary array of the data</param>
            <param name="ReturnContentType">The Content-Type header.  Ex: "image/gif", "application/x-zip-compressed", etc</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.UrlRequestEventArgs.ReturnContentType">
            <summary>
            The Content-Type header.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.UrlRequestEventArgs.ReturnText">
            <summary>
            The text data for the handled URL, if applicable.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.UrlRequestEventArgs.ReturnBinary">
            <summary>
            The binary data for the handled URL, if applicable.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.UrlRequestEventArgs.UrlHandled">
            <summary>
            If a set data method has been used
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.UrlRequestEventArgs.ReturnIsText">
            <summary>
            If a text or binary writer should be used to send data
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.UrlRequestEventArgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            I/O data for the URL request
            </summary>
            <param name="Url">The URL fragment requested by the client</param>
            <param name="Headers">The HTTP headers</param>
            <param name="UrlVars">The variables passed from the URL (Ex: http://host/url?var1=one&amp;var2=two)</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.LogLineEventDelegate">
            <summary>
            Parsed log line event delegate
            </summary>
            <param name="isImport">If you only wish to handle events from real-time parsing, ignore events with this True</param>
            <param name="logInfo"></param>
        </member>
        <member name="T:Advanced_Combat_Tracker.LogLineEventArgs">
            <summary>
            Class holding a log line and info about it
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.logLine">
            <summary>
            The full log line
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.detectedType">
            <summary>
            The detected log line type from the parsing engine.  0 if ACT ignored the log line or is not currently set
            If you are setting this yourself as a parsing plugin, the value may corrispond to a 32-bit ARGB value to create a color in the ViewLogs window
            IE, if you want red, set this as System.Drawing.Color.Red.ToArgb();
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.detectedTime">
            <summary>
            Timestamp parsed from the log line
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.detectedZone">
            <summary>
            The zone at the time of parsing
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.inCombat">
            <summary>
            If there is already an encounter active
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.originalLogLine">
            <summary>
            The original log line that was passed to the constructor
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.LogLineEventArgs.companionLogName">
            <summary>
            The sub-name of the companion log file.  Blank if from the main log file.  "Plugin" if a direct call to ParseRawLogLine() was made.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.LogLineEventArgs.#ctor(System.String,System.Int32,System.DateTime,System.String,System.Boolean)">
            <summary>
            Class holding a log line and info about it
            </summary>
            <param name="LogLine">The full log line</param>
            <param name="DetectedType">The detected log line type from the parsing engine.  0 if ACT ignored the log line</param>
            <param name="DetectedTime">Timestamp parsed from the log line</param>
            <param name="DetectedZone">The zone at the time of parsing</param>
            <param name="InCombat">If there is already an encounter active</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatToggleEventDelegate">
            <summary>
            Combat toggling event delegate
            </summary>
            <param name="isImport">If you only wish to handle events from real-time parsing, ignore events with this True</param>
            <param name="encounterInfo">The encounter object and other info</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatToggleEventArgs">
            <summary>
            Class holding an encounter object and it's position
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatToggleEventArgs.zoneDataIndex">
            <summary>
            The index that the parent zone node holds
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatToggleEventArgs.encounterDataIndex">
            <summary>
            The index that the encounter holds within the parent ZoneData object
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatToggleEventArgs.encounter">
            <summary>
            Object handle of the encounter
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatToggleEventArgs.#ctor(System.Int32,System.Int32,Advanced_Combat_Tracker.EncounterData)">
            <summary>
            Class holding an encounter object and it's position
            </summary>
            <param name="zdIndex"> The index that the parent zone node holds</param>
            <param name="edIndex">The index that the encounter holds within the parent ZoneData object</param>
            <param name="ed">Object handle of the encounter</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatActionDelegate">
            <summary>
            Combat action event delegate
            </summary>
            <param name="isImport">If you only wish to handle events from real-time parsing, ignore events with this True</param>
            <param name="actionInfo">All of the parsed info ready to used</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatActionEventArgs">
            <summary>
            Event data containing info about the combat action.  If subscribed to the correct event, this info can be changed before being stored as data
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.swingType">
            <summary>
            The action type.  (int)SwingTypeEnum can help you convert this.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.critical">
            <summary>
            If the attack was a critical hit
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.attacker">
            <summary>
            The source of the action
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.theAttackType">
            <summary>
            The skill name or type of action
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.damage">
            <summary>
            The amount of damage
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.time">
            <summary>
            Time of occurance
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.timeSorter">
            <summary>
            A variable used for stable sorting between actions with the same timestamp
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.victim">
            <summary>
            The destination of the action
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.theDamageType">
            <summary>
            The type of damage, such as crushing, divine, etc
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.special">
            <summary>
            A "double" attack, "flurry" etc... or "None"
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.tags">
            <summary>
            Arbitrary data you may assign to a MasterSwing object
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.combatAction">
            <summary>
            Read-only object reference
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatActionEventArgs.#ctor(Advanced_Combat_Tracker.MasterSwing)">
            <summary>
            Event data containing info about the combat action.  If subscribed to the correct event, this info can be changed before being stored as data
            </summary>
            <param name="CombatAction">Created object reference to change</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatActionEventArgs.#ctor(System.Int32,System.Boolean,System.String,System.String,System.String,Advanced_Combat_Tracker.Dnum,System.DateTime,System.Int32,System.String,System.String)">
            <summary>
            Event data containing info about the combat action.  If subscribed to the correct event, this info can be changed before being stored as data
            </summary>
            <param name="SwingType">The action type.  (int)SwingTypeEnum can help you convert this.</param>
            <param name="Critical">If the attack was a critical hit</param>
            <param name="Special">A "double" attack, "flurry" etc... or "None"</param>
            <param name="Attacker">The source of the action</param>
            <param name="TheAttackType">The skill name or type of action</param>
            <param name="Damage">The amount of damage</param>
            <param name="Time">Time of occurance</param>
            <param name="TimeSorter">A variable used for stable sorting between actions with the same timestamp</param>
            <param name="Victim">The destination of the action</param>
            <param name="TheDamageType">The type of damage, such as crushing, divine, etc</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatActionEventArgs.#ctor(System.Int32,System.Boolean,System.String,System.String,Advanced_Combat_Tracker.Dnum,System.DateTime,System.Int32,System.String,System.String)">
            <summary>
            Event data containing info about the combat action.  If subscribed to the correct event, this info can be changed before being stored as data
            </summary>
            <param name="SwingType">The action type.  (int)SwingTypeEnum can help you convert this.</param>
            <param name="Critical">If the attack was a critical hit</param>
            <param name="Attacker">The source of the action</param>
            <param name="TheAttackType">The skill name or type of action</param>
            <param name="Damage">The amount of damage</param>
            <param name="Time">Time of occurance</param>
            <param name="TimeSorter">A variable used for stable sorting between actions with the same timestamp</param>
            <param name="Victim">The destination of the action</param>
            <param name="TheDamageType">The type of damage, such as crushing, divine, etc</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatActionEventArgs.cancelAction">
            <summary>
            If this is set to true, the data will not be entered
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ActPluginData">
            <summary>
            Data container for plugin instances and related UI elements
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.pPluginInfo">
            <summary>
            The panel in the plugins tab that contains the other ACT generated UI elements
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.tpPluginSpace">
            <summary>
            The sub-tab made for each individual plugin
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.pluginFile">
            <summary>
            The file of the plugin
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.lblPluginTitle">
            <summary>
            The plugin label
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.lblPluginStatus">
            <summary>
            The status label passed to InitPlugin
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.btnXButton">
            <summary>
            The red X button that will remove the plugin from the plugins tab (raises a user dialog)
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.cbEnabled">
            <summary>
            Checkbox that calls InitPlugin /  DeInitPlugin
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.pluginVersion">
            <summary>
            Versioning information found from the plugin
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.ActPluginData.pluginObj">
            <summary>
            Plugin instance
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.LocalizationObject.DisplayedText">
            <summary>
            The string that will be visible to users
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.LocalizationObject.LocalizationDescription">
            <summary>
            A description for translators
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.HistoryRecord">
            <summary>
            Data class used in Zone/Encounter History Records
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.Duration">
            <summary>
            EndTime - StartTime
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.HistoryRecord.#ctor(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Data class used in Zone/Encounter History Records
            </summary>
            <param name="Type">0 for zones, 1 for encounters</param>
            <param name="StartTime">The zone in time, or the first action of an encounter</param>
            <param name="EndTime">The time the zone was left, or the EndTime of the encounter</param>
            <param name="Label">The zone name, or encounter title</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.CharName">
            <summary>
            The active character that the event was created for
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.StartTime">
            <summary>
            The zone in time, or the first action of an encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.EndTime">
            <summary>
            The time the zone was left, or the EndTime of the encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.Type">
            <summary>
            0 for zones, 1 for encounters
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.Label">
            <summary>
            The zone name, or encounter title
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.HistoryRecord.FolderHint">
            <summary>
            What folder the log file should be in
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.HistoryRecord.CompareTo(Advanced_Combat_Tracker.HistoryRecord)">
            <summary>
            StartTime comparison
            </summary>
            <param name="other"></param>
            <returns>Order of compared StartTimes</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.HistoryRecord.Equals(Advanced_Combat_Tracker.HistoryRecord)">
            <summary>
            StartTime equality
            </summary>
            <param name="other"></param>
            <returns>If they share the same timestamp</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.HistoryRecord.Equals(System.Object)">
            <summary>
            StartTime equality
            </summary>
            <param name="obj"></param>
            <returns>If they share the same timestamp</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.HistoryRecord.ToString">
            <summary>
            Formatted label with date/time/duration
            </summary>
            <returns>Label prefixed with spaces if an encounter</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.IActPluginV1">
            <summary>
            To be loaded by ACT, plugins must implement this interface
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.IActPluginV1.InitPlugin(System.Windows.Forms.TabPage,System.Windows.Forms.Label)">
            <summary>
            Will be called when ACT starts the plugin
            </summary>
            <param name="pluginScreenSpace">Provides the plugin with a default screen space in which to draw controls</param>
            <param name="pluginStatusText">Provides the plugin with a default label on the main plugins page to show status</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.IActPluginV1.DeInitPlugin">
            <summary>
            Will be called when ACT is terminating the plugin.  The plugin must release all resources at this time
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.VcrEncounter">
            <summary>
            Top level data object for creating a VCR playback
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.VcrCombatant">
            <summary>
            Data object used for VCR playbacks
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.VcrCombatant.Instances">
            <summary>
            How many lives
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.VcrEvent">
            <summary>
            Data object used for VCR playbacks
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.TimelineEvent">
            <summary>
            Timeline data object
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ToolTipGrid">
            <summary>
            Data object container for tool tip popups
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ToolTipRect">
            <summary>
            Data object for containing tool tip text within a plane
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ToolTipRect.ItemIndex">
            <summary>
            If it has an index within a list
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ToolTipRect.Active">
            <summary>
            If it should be shown
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ToolTipRect.#ctor(System.Int32,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Data object for containing tool tip text within a plane
            </summary>
            <param name="ItemIndex">If it has an index within a list to point to</param>
            <param name="ToolTipText"></param>
            <param name="x">X Location</param>
            <param name="y">Y Location</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.CustomTrigger">
            <summary>
            Data object for Custom Triggers
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CustomTrigger.#ctor(System.String,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Custom Trigger data object
            </summary>
            <param name="cRegex">Regular Expression string</param>
            <param name="cSoundType">Type of sound response. (int)CustomTriggerSoundTypeEnum can help you convert this value.</param>
            <param name="cSoundData">WAV location or TTS string</param>
            <param name="cTimer">If this trigger will notify the Spell Timers window</param>
            <param name="cTimerName">The Spell Timer name to notify</param>
            <param name="cTabbed">If the Custom Trigger has a results tab</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.Category">
            <summary>
            Category within the custom trigger treeview selector
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.RestrictToCategoryZone">
            <summary>
            If the custom trigger should only take effect within a zone matching the category label
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.TabbedAge">
            <summary>
            How long ago an item was added to the results tab
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.TabbedCurrentIndex">
            <summary>
            Item index of the last selected ListView row in the results tab (used for next/prev seeking in searches)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.ResultsTab">
            <summary>
            Object handle for the results tab(if existing)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.TriggerListView">
            <summary>
            Object handle for the ListView within the results tab(if existing)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.TriggerSearchBox">
            <summary>
            The TextBox within the results tab(if existing) used for searching
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.SoundType">
            <summary>
            (int)CustomTriggerSoundTypeEnum can be used to convert this
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CustomTrigger.TimerString">
            <summary>
            Returns a label if the custom trigger is tabbed or triggers a timer else "&lt;None&gt;"
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterHTMLEntry">
            <summary>
            Data object for tracking the index page of the HTML view
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.HitDist">
            <summary>
            Simple data object for tracking a number of occurances
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.SampleData">
            <summary>
            Data object for advanced mode graphing
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.TimerMod">
            <summary>
            Data class to store recast delay mods of spell timers
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerMod.ModName">
            <summary>
            Name of mod, such as Traumatic Swipe
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerMod.Attacker">
            <summary>
            User of the mod
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerMod.Victim">
            <summary>
            Destination of the mod
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerMod.ModValue">
            <summary>
            Amount that the mod adds to recast delays...  TS is 0.5F
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerMod.LastUse">
            <summary>
            Time of application
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerMod.UseDuration">
            <summary>
            How long it will stay in effect
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerMod.#ctor(System.String,System.String,System.String,System.Single,System.DateTime,System.TimeSpan)">
            <summary>
            Data class to store recast delay mods of spell timers
            </summary>
            <param name="Attacker">User of the mod</param>
            <param name="Victim">Destination of the mod</param>
            <param name="ModName">Name of mod, such as Traumatic Swipe</param>
            <param name="ModValue">Amount that the mod adds to recast delays...  TS is 0.5F</param>
            <param name="LastUse">Time of application</param>
            <param name="UseDuration">How long it will stay in effect</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.TimerFrame">
            <summary>
            Data class representing a frame within the Spell Timer window
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.WarningSounded">
            <summary>
            If the Warning Sound has already played (Failsafe for code locks)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.ExpireSounded">
            <summary>
            If the Expire Sound has already played (Failsafe for code locks)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.TimerData">
            <summary>
            Original data source
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.Combatant">
            <summary>
            Caster of the skill
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.SpellTimers">
            <summary>
            List of timer instances within this frame
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.Name">
            <summary>
            Name of the spell/skill
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.RestrictToMe">
            <summary>
            If only to take notice of actions from or to you
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.OneOnly">
            <summary>
            If to block other timers from starting when a valid one still exists
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.StartSoundData">
            <summary>
            Sound data when a normal timer starts
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.WarningSoundData">
            <summary>
            Sound data for when a normal timer reaches the WarningValue
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.WarningValue">
            <summary>
            When the timer should be in a warning state
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.RadialDisplay">
            <summary>
            If a radial display should be drawn in the frame
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerFrame.#ctor(System.String,Advanced_Combat_Tracker.TimerData)">
            <summary>
            Data class representing a frame within the Spell Timer window
            </summary>
            <param name="SpellTimerData">Original data object</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.TimerVals">
            <summary>
            Sorted list of the time left on each timer
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.TopModAmount">
            <summary>
            The AA mod value on the most current normal timer
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerFrame.MasterExists">
            <summary>
            If a normal timer still exists (normal is a non-dot tick)
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerFrame.GetLargestVal(System.Boolean)">
            <summary>
            Gets the largest time left value
            </summary>
            <param name="IncludeNonMaster">If to include dot ticks</param>
            <returns>Time remaining in seconds</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerFrame.GetSmallestVal(System.Boolean)">
            <summary>
            Gets the lowest time left value
            </summary>
            <param name="IncludeNonMaster">If to include dot ticks</param>
            <returns>Time remaining in seconds</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerFrame.GetMostRecentTime(System.Boolean)">
            <summary>
            Gets the DateTime of the most recently added timer
            </summary>
            <param name="IncludeNonMaster">If to include dot ticks</param>
            <returns></returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.SpellTimer">
            <summary>
            Spell timer object
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.SpellTimer.#ctor(System.Boolean,System.Int32,System.Collections.Generic.List{Advanced_Combat_Tracker.TimerMod},System.DateTime)">
            <summary>
            Spell timer object
            </summary>
            <param name="MasterTimer">If it is a normal timer instead of a dot tick</param>
            <param name="TimerDuration">The original recast delay</param>
            <param name="TimerModValue">The amount of AA mods to apply</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.SpellTimer.MasterTimer">
            <summary>
            If it is a normal timer instead of a dot tick
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.SpellTimer.StartTime">
            <summary>
            When the timer was created
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.SpellTimer.TimerModValue">
            <summary>
            The amount of AA mods to apply
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.SpellTimer.TimerFinalDuration">
            <summary>
            The calculated recast duration after mods
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.SpellTimer.TimeLeft">
            <summary>
            The amount of time left from now, in seconds
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.TimerData">
            <summary>
            Timer Window data object.  This can be used as storage object for spell timer definitions
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.Panel1Display">
            <summary>
            If to display in the first spell timers window
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.Panel2Display">
            <summary>
            If to display in the second spell timers window
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.FillColor">
            <summary>
            The color to fill the radial timer indicator
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.Modable">
            <summary>
            If the spell is allowed to be modified by recast debuffs
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerData.#ctor(System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            A timer sub-object
            </summary>
            <param name="Name">Name of the spell</param>
            <param name="OnlyMasterTicks">If the timer should be considered normal or a dot tick</param>
            <param name="TimerValue">Amount of time to start with</param>
            <param name="RestrictToMe">If the timer only triggers for you casting/getting hit</param>
            <param name="AbsoluteTiming">If only one of the timer can exist at a time</param>
            <param name="StartSoundData">Sound data string</param>
            <param name="WarningSoundData">Sound data string</param>
            <param name="WarningValue">How many seconds left should be a warning</param>
            <param name="RadialDisplay">If the display shows the pie countdown</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerData.#ctor(System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            A timer sub-object
            </summary>
            <param name="Name">Name of the spell</param>
            <param name="OnlyMasterTicks">If the timer should be considered normal or a dot tick</param>
            <param name="TimerValue">Amount of time to start with</param>
            <param name="RestrictToMe">If the timer only triggers for you casting/getting hit</param>
            <param name="AbsoluteTiming">If only one of the timer can exist at a time</param>
            <param name="StartSoundData">Sound data string</param>
            <param name="WarningSoundData">Sound data string</param>
            <param name="WarningValue">How many seconds left should be a warning</param>
            <param name="RadialDisplay">If the display shows the pie countdown</param>
            <param name="Modable">If the spell can be affected by recast mods</param>
            <param name="Tooltip">Extra info to show in a tooltip</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerData.#ctor(System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Drawing.Color)">
            <summary>
            A timer sub-object
            </summary>
            <param name="Name">Name of the spell</param>
            <param name="OnlyMasterTicks">If the timer should be considered normal or a dot tick</param>
            <param name="TimerValue">Amount of time to start with</param>
            <param name="RestrictToMe">If the timer only triggers for you casting/getting hit</param>
            <param name="AbsoluteTiming">If only one of the timer can exist at a time</param>
            <param name="StartSoundData">Sound data string</param>
            <param name="WarningSoundData">Sound data string</param>
            <param name="WarningValue">How many seconds left should be a warning</param>
            <param name="RadialDisplay">If the display shows the pie countdown</param>
            <param name="Modable">If the spell can be affected by recast mods</param>
            <param name="Tooltip">Extra info to show in a tooltip</param>
            <param name="FillColor">The color of the radial timer display</param>		
        </member>
        <member name="M:Advanced_Combat_Tracker.TimerData.#ctor(System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            A timer sub-object
            </summary>
            <param name="Name">Name of the spell</param>
            <param name="OnlyMasterTicks">If the timer should be considered normal or a dot tick</param>
            <param name="TimerValue">Amount of time to start with</param>
            <param name="RestrictToMe">If the timer only triggers for you casting/getting hit</param>
            <param name="AbsoluteTiming">If only one of the timer can exist at a time</param>
            <param name="StartSoundData">Sound data string</param>
            <param name="WarningSoundData">Sound data string</param>
            <param name="WarningValue">How many seconds left should be a warning</param>
            <param name="RadialDisplay">If the display shows the pie countdown</param>
            <param name="Modable">If the spell can be affected by recast mods</param>
            <param name="Tooltip">Extra info to show in a tooltip</param>
            <param name="FillColor">The color of the radial timer display</param>		
            <param name="Panel1">If to display in the first timers panel</param>		
            <param name="Panel2">If to display in the second timers panel</param>		
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.RadialDisplay">
            <summary>
            If the timer will show a radial display
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.TimerValue">
            <summary>
            Current time remaining for this timer
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.WarningValue">
            <summary>
            The threshold for putting the timer into a warning state
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.AbsoluteTiming">
            <summary>
            If only one of this timer name should be allowed to exist
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.RestrictToMe">
            <summary>
            If the timer will only be triggered from you being hit or using the skill yourself
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.StartSoundData">
            <summary>
            Timer start sound data string
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.TimerData.WarningSoundData">
            <summary>
            Warning sound data string
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.LogLineEntry">
            <summary>
            Data object for Encounter Logs window
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.LogLineEntry.Type">
            <summary>
            A localization specific parsed type
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.LogLineEntry.SearchSelected">
            <summary>
            If the last search marked this line as a match
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.TextExportFormatOptions">
            <summary>
            Formatting data object for the Mini Window/Clipboard Exporting
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.StrFloat">
            <summary>
            Data object containing a string and float
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.StrDouble">
            <summary>
            Data object containing a string and double
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.Dnum">
            <summary>
            A variable for storing damage numbers based on Int64
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Dnum.#ctor(System.Int64)">
            <summary>
            A simple positive damage amount
            </summary>
            <param name="NumberValue">A positive Int64 or static Dnum property</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Dnum.#ctor(System.Int64,System.String)">
            <summary>
            A complex damage amount or failed attack
            </summary>
            <param name="NumberValue">A positive Int64 or static Dnum property</param>
            <param name="CustomDamageString">A string that better shows what the value means</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.Dnum.Unknown">
            <summary>
            A failed attack that will be described by the custom DamageString
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Dnum.DamageString">
            <summary>
            A detailed label used for failed attacks(Victim parries) or complex damage attacks
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.MasterSwing">
            <summary>
            Data object holding all info relating to a single attack(or any combat action)
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.MasterSwing.StringDataCallback">
            <summary>
            A signature used to accept a MasterSwing object and return a string of data based on what the ColumnDef represents
            </summary>
            <param name="Data">The MasterSwing object to retrieve data from</param>
            <returns>The string that contains the data the ColumnDef represents for the MasterSwing object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.MasterSwing.ColorDataCallback">
            <summary>
            A signature used to accept an EncounterData object and return a Fore/Back-color based on what the ColumnDef represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <returns>The color that should be used to highlight data</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.MasterSwing.ColumnDef">
            <summary>
            A column defintion for MasterSwing objects
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.MasterSwing.ColumnDef.GetCellData">
            <summary>
            The delegated method to be called to get back a string to display in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.MasterSwing.ColumnDef.GetSqlData">
            <summary>
            The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.MasterSwing.ColumnDef.SortComparer">
            <summary>
            The comparison method to call to compare two MasterSwing objects for sorting
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.MasterSwing.ColumnDef.GetCellForeColor">
            <summary>
            The delegated method to be called to get the ForeColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.MasterSwing.ColumnDef.GetCellBackColor">
            <summary>
            The delegated method to be called to get the BackColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.MasterSwing.ColumnDef.#ctor(System.String,System.Boolean,System.String,System.String,Advanced_Combat_Tracker.MasterSwing.StringDataCallback,Advanced_Combat_Tracker.MasterSwing.StringDataCallback,System.Comparison{Advanced_Combat_Tracker.MasterSwing})">
            <summary>
            A column defintion for MasterSwing objects
            </summary>
            <param name="Label">This should be the same text as the dictionary key used to store this object which is what is displayed in ACT</param>
            <param name="DefaultVisible">If a column is visible in ACT by default(when first added to the configuration)</param>
            <param name="SqlDataType">The SQL data type such as INT, VARCHAR, FLOAT</param>
            <param name="SqlDataName">The SQL safe name of the column</param>
            <param name="CellDataCallback">The delegated method to be called to get back a string to display in ACT</param>
            <param name="SqlDataCallback">The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.</param>
            <param name="SortComparer">The comparison method to call to compare two MasterSwing objects for sorting</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColumnDef.SqlDataType">
            <summary>
            The SQL data type such as INT, VARCHAR, FLOAT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColumnDef.SqlDataName">
            <summary>
            The SQL safe name of the column
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColumnDef.DefaultVisible">
            <summary>
            If a column is visible in ACT by default(when first added to the configuration)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColumnDef.Label">
            <summary>
            This should be the same text as the dictionary key used to store this object which is what is displayed in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.MasterSwing.ColumnDefs">
            <summary>
            A collection of column definitions that may appear in tables
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.MasterSwing.#ctor(System.Int32,System.Boolean,Advanced_Combat_Tracker.Dnum,System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Data object for a single combat action
            </summary>
            <param name="SwingType">Type of attack.  Use (int)SwingTypeEnum</param>
            <param name="Critical">Critical hit</param>
            <param name="damage">Amount of damage</param>
            <param name="Time">Timestamp</param>
            <param name="TimeSorter">Unique sorting number for exact order sorting</param>
            <param name="theAttackType">Skill or spell name</param>
            <param name="Attacker">Source of the action</param>
            <param name="theDamageType">Type of damage inflicted (crushing/magic/heat/disease etc)</param>
            <param name="Victim">Target of the Action</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.MasterSwing.#ctor(System.Int32,System.Boolean,System.String,Advanced_Combat_Tracker.Dnum,System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Data object for a single combat action
            </summary>
            <param name="SwingType">Type of attack.  Use (int)SwingTypeEnum</param>
            <param name="Critical">Critical hit</param>
            <param name="Special">If a special type of attack (flurry, double, etc)</param>
            <param name="damage">Amount of damage</param>
            <param name="Time">Timestamp</param>
            <param name="TimeSorter">Unique sorting number for exact order sorting</param>
            <param name="theAttackType">Skill or spell name</param>
            <param name="Attacker">Source of the action</param>
            <param name="theDamageType">Type of damage inflicted (crushing/magic/heat/disease etc)</param>
            <param name="Victim">Target of the Action</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.MasterSwing.GetColumnByName(System.String)">
            <summary>
            Gets the cell text for a given column
            </summary>
            <param name="name">The column name.  The possible names are the ones in the Table Setup tab of ACT, not the SQL column names.</param>
            <returns></returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.TimeSorter">
            <summary>
            Unique sorting number for exact order sorting
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.SwingType">
            <summary>
            Type of attack.  Use (int)SwingTypeEnum
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.Damage">
            <summary>
            Amount of damage
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.Attacker">
            <summary>
            Source of the action
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.Victim">
            <summary>
            Destination of the action
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.AttackType">
            <summary>
            Skill or Spell Name
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.DamageType">
            <summary>
            Type of damage inflicted (crushing/magic/heat/disease etc)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.Critical">
            <summary>
            Critical hit
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColTypeCollection">
            <summary>
            Contains SQL column data types
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColHeaderCollection">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColHeaderString">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.ColCollection">
            <summary>
            Contains SQL column data
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.MasterSwing.Tags">
            <summary>
            Arbitrary data you may assign to a MasterSwing object
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.AttackType">
            <summary>
            Data object holding swings of a specific type of attack
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.AttackType.StringDataCallback">
            <summary>
            A signature used to accept a AttackType object and return a string of data based on what the ColumnDef represents
            </summary>
            <param name="Data">The AttackType object to retrieve data from</param>
            <returns>The string that contains the data the ColumnDef represents for the AttackType object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.AttackType.ColorDataCallback">
            <summary>
            A signature used to accept an EncounterData object and return a Fore/Back-color based on what the ColumnDef represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <returns>The color that should be used to highlight data</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.AttackType.ColumnDef">
            <summary>
            A column defintion for AttackType objects
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.AttackType.ColumnDef.GetCellData">
            <summary>
            The delegated method to be called to get back a string to display in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.AttackType.ColumnDef.GetSqlData">
            <summary>
            The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.AttackType.ColumnDef.SortComparer">
            <summary>
            The comparison method to call to compare two AttackType objects for sorting
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.AttackType.ColumnDef.GetCellForeColor">
            <summary>
            The delegated method to be called to get the ForeColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.AttackType.ColumnDef.GetCellBackColor">
            <summary>
            The delegated method to be called to get the BackColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.AttackType.ColumnDef.#ctor(System.String,System.Boolean,System.String,System.String,Advanced_Combat_Tracker.AttackType.StringDataCallback,Advanced_Combat_Tracker.AttackType.StringDataCallback,System.Comparison{Advanced_Combat_Tracker.AttackType})">
            <summary>
            A column defintion for AttackType objects
            </summary>
            <param name="Label">This should be the same text as the dictionary key used to store this object which is what is displayed in ACT</param>
            <param name="DefaultVisible">If a column is visible in ACT by default(when first added to the configuration)</param>
            <param name="SqlDataType">The SQL data type such as INT, VARCHAR, FLOAT</param>
            <param name="SqlDataName">The SQL safe name of the column</param>
            <param name="CellDataCallback">The delegated method to be called to get back a string to display in ACT</param>
            <param name="SqlDataCallback">The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.</param>
            <param name="SortComparer">The comparison method to call to compare two AttackType objects for sorting</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColumnDef.SqlDataType">
            <summary>
            The SQL data type such as INT, VARCHAR, FLOAT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColumnDef.SqlDataName">
            <summary>
            The SQL safe name of the column
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColumnDef.DefaultVisible">
            <summary>
            If a column is visible in ACT by default(when first added to the configuration)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColumnDef.Label">
            <summary>
            This should be the same text as the dictionary key used to store this object which is what is displayed in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.AttackType.ColumnDefs">
            <summary>
            A collection of column definitions that may appear in tables
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.AttackType.#ctor(System.String,Advanced_Combat_Tracker.DamageTypeData)">
            <summary>
            Data object holding swings of a specific type of attack
            </summary>
            <param name="theAttackType">The attack string label</param>
            <param name="Parent">The parent container object</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.AttackType.InvalidateCachedValues">
            <summary>
            Reset caching for calculations that are not tolerant of adding data to the end
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.AttackType.InvalidateCachedValues(System.Boolean)">
            <summary>
            Reset caching for calculations
            </summary>
            <param name="ResetIncremental">If true, all caching is cleared.  If false, incremental caching is kept.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.AttackType.Trim">
            <summary>
            Trims unused elements from all child arrays
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColTypeCollection">
            <summary>
            Contains SQL column data types
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColHeaderCollection">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColHeaderString">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ColCollection">
            <summary>
            Contains SQL column data
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.AttackType.GetColumnByName(System.String)">
            <summary>
            Gets the cell text for a given column
            </summary>
            <param name="name">The column name.  The possible names are the ones in the Table Setup tab of ACT, not the SQL column names.</param>
            <returns></returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Type">
            <summary>
            The label of the AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Resist">
            <summary>
            The common type of damage the AttackType uses
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Damage">
            <summary>
            Amount of damage in total
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Hits">
            <summary>
            Number of successful hits
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.CritHits">
            <summary>
            Number of critical hits
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.CritPerc">
            <summary>
            String representation of the critical percentage rate
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Swings">
            <summary>
            Total number of attempted attacks
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Misses">
            <summary>
            Number of attacks that were a "miss", resists or other fails are not counted in this
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Blocked">
            <summary>
            A failed attack that is not a miss
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.ToHit">
            <summary>
            Percentage of hits
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Average">
            <summary>
            Average hit of successful
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Median">
            <summary>
            Median value of attacks
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.StartTime">
            <summary>
            First attack
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.EndTime">
            <summary>
            Last attack
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.MinHit">
            <summary>
            Smallest hit amount
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.MaxHit">
            <summary>
            Largest hit amount
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.EncDPS">
            <summary>
            Damage divided the Encounter duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.CharDPS">
            <summary>
            Damage divided by the Character duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.DPS">
            <summary>
            Damage divided by the AttackType duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Duration">
            <summary>
            From StartTime to EndTime, or in the case of merged data, the additions of each encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.DurationS">
            <summary>
            Formatted duration string
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.AverageDelay">
            <summary>
            Duration divided by number of swings
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Items">
            <summary>
            Child Swing objects that make up this data.  If you *add* to this data call InvalidateCachedValues().  If you make *any* other modifications, call InvalidateCachedValues(true).
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.AttackType.Tags">
            <summary>
            Arbitrary data you may assign to a AttackType object
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.DamageTypeData">
            <summary>
            Data object labeled as Melee/Non-Melee etc that holds child AttackTypes
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.DamageTypeData.StringDataCallback">
            <summary>
            A signature used to accept a DamageTypeData object and return a string of data based on what the ColumnDef represents
            </summary>
            <param name="Data">The DamageTypeData object to retrieve data from</param>
            <returns>The string that contains the data the ColumnDef represents for the DamageTypeData object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.DamageTypeData.ColorDataCallback">
            <summary>
            A signature used to accept an EncounterData object and return a Fore/Back-color based on what the ColumnDef represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <returns>The color that should be used to highlight data</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.DamageTypeData.ColumnDef">
            <summary>
            A column defintion for DamageTypeData objects
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.GetCellData">
            <summary>
            The delegated method to be called to get back a string to display in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.GetSqlData">
            <summary>
            The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.GetCellForeColor">
            <summary>
            The delegated method to be called to get the ForeColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.GetCellBackColor">
            <summary>
            The delegated method to be called to get the BackColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.#ctor(System.String,System.Boolean,System.String,System.String,Advanced_Combat_Tracker.DamageTypeData.StringDataCallback,Advanced_Combat_Tracker.DamageTypeData.StringDataCallback)">
            <summary>
            A column defintion for DamageTypeData objects
            </summary>
            <param name="Label">This should be the same text as the dictionary key used to store this object which is what is displayed in ACT</param>
            <param name="DefaultVisible">If a column is visible in ACT by default(when first added to the configuration)</param>
            <param name="SqlDataType">The SQL data type such as INT, VARCHAR, FLOAT</param>
            <param name="SqlDataName">The SQL safe name of the column</param>
            <param name="CellDataCallback">The delegated method to be called to get back a string to display in ACT</param>
            <param name="SqlDataCallback">The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.SqlDataType">
            <summary>
            The SQL data type such as INT, VARCHAR, FLOAT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.SqlDataName">
            <summary>
            The SQL safe name of the column
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.DefaultVisible">
            <summary>
            If a column is visible in ACT by default(when first added to the configuration)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColumnDef.Label">
            <summary>
            This should be the same text as the dictionary key used to store this object which is what is displayed in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.DamageTypeData.ColumnDefs">
            <summary>
            A collection of column definitions that may appear in tables
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.DamageTypeData.#ctor(System.Boolean,System.String,Advanced_Combat_Tracker.CombatantData)">
            <summary>
            Data object labeled as Melee/NonMelee etc that holds child AttackTypes
            </summary>
            <param name="Outgoing">If the types of attacks stored are outgoing or incoming</param>
            <param name="Tag">The text label of the DamageTypeData object such as "All Outgoing(Ref)"</param>
            <param name="Parent">The parent container of this object</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Parent">
            <summary>
            The CombatantData object that holds this
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Outgoing">
            <summary>
            If the type of attacks stored are incoming or outgoing
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.DamageTypeData.Trim">
            <summary>
            Trims unused elements from all child arrays
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColTypeCollection">
            <summary>
            Contains SQL column data types
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColHeaderCollection">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColHeaderString">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ColCollection">
            <summary>
            Contains SQL column data
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.DamageTypeData.GetColumnByName(System.String)">
            <summary>
            Gets the cell text for a given column
            </summary>
            <param name="name">The column name.  The possible names are the ones in the Table Setup tab of ACT, not the SQL column names.</param>
            <returns></returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.StartTime">
            <summary>
            First action recorded from the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.EndTime">
            <summary>
            Last action recorded from the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Duration">
            <summary>
            From StartTime to EndTime, or in the case of merged data, the additions of each encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.DurationS">
            <summary>
            Formatted duration string
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.AverageDelay">
            <summary>
            Duration divided by number of swings
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Damage">
            <summary>
            Total damage reported by the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Swings">
            <summary>
            Total swings reported by the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Hits">
            <summary>
            Total hits reported by the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.CritHits">
            <summary>
            Total critical hits reported by the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.CritPerc">
            <summary>
            String representation of the critical percentage rate
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Misses">
            <summary>
            Total misses reported by the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Blocked">
            <summary>
            Total failed attacks(not misses) reported by the "All" AttackType
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.ToHit">
            <summary>
            Percentage of successful attacks
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Average">
            <summary>
            Average successful hit
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Median">
            <summary>
            Median successful hit
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.MinHit">
            <summary>
            Smallest hit
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.MaxHit">
            <summary>
            Largest hit
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.EncDPS">
            <summary>
            Damage divided by the encounter duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.CharDPS">
            <summary>
            Damage divided by the combatant duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.DPS">
            <summary>
            Damage divided by DamageType duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Type">
            <summary>
            The DamageType label
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Items">
            <summary>
            Child AttackType objects
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.DamageTypeData.Tags">
            <summary>
            Arbitrary data you may assign to a DamageTypeData object
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData">
            <summary>
            A data object representing a combatant within an encounter
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData.ExportStringDataCallback">
            <summary>
            A signature used to accept a CombatantData object and return a string of data based on what the TextExportFormatter represents
            </summary>
            <param name="Data">The CombatantData object to retrieve data from</param>
            <param name="ExtraFormat">A string that is extracted after a colon to specialize the output</param>
            <returns>The string that contains the data the TextExportFormatter represents for the CombatantData object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData.TextExportFormatter">
            <summary>
            A text export definition for a CombatantData object
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.TextExportFormatter.GetExportString">
            <summary>
            A delegated method to be called to get back a string to be put into a text export
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.TextExportFormatter.#ctor(System.String,System.String,System.String,Advanced_Combat_Tracker.CombatantData.ExportStringDataCallback)">
            <summary>
            A text export definition for a CombatantData object
            </summary>
            <param name="Name">The simple name that represents the text export formatter, like {damage} or {dps}</param>
            <param name="Label">A friendly label for the text export formatter</param>
            <param name="Description">A decription of what the user should expect from the formatter</param>
            <param name="FormatterCallback">A delegated method to be called to get back a string to be put into a text export</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.TextExportFormatter.Label">
            <summary>
            A friendly label for the text export formatter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.TextExportFormatter.Description">
            <summary>
            A decription of what the user should expect from the formatter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.TextExportFormatter.Name">
            <summary>
            The simple name that represents the text export formatter, like {damage} or {dps}
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ExportVariables">
            <summary>
            A collection of text export formatters that may be used in clipboard/mini-window/etc exports
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData.StringDataCallback">
            <summary>
            A signature used to accept a CombatantData object and return a string of data based on what the ColumnDef represents
            </summary>
            <param name="Data">The CombatantData object to retrieve data from</param>
            <returns>The string that contains the data the ColumnDef represents for the CombatantData object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData.ColorDataCallback">
            <summary>
            A signature used to accept an EncounterData object and return a Fore/Back-color based on what the ColumnDef represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <returns>The color that should be used to highlight data</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData.ColumnDef">
            <summary>
            A column defintion for CombatantData objects
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ColumnDef.GetCellData">
            <summary>
            The delegated method to be called to get back a string to display in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ColumnDef.GetSqlData">
            <summary>
            The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ColumnDef.SortComparer">
            <summary>
            The comparison method to call to compare two CombatantData objects for sorting
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ColumnDef.GetCellForeColor">
            <summary>
            The delegated method to be called to get the ForeColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ColumnDef.GetCellBackColor">
            <summary>
            The delegated method to be called to get the BackColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.ColumnDef.#ctor(System.String,System.Boolean,System.String,System.String,Advanced_Combat_Tracker.CombatantData.StringDataCallback,Advanced_Combat_Tracker.CombatantData.StringDataCallback,System.Comparison{Advanced_Combat_Tracker.CombatantData})">
            <summary>
            A column defintion for CombatantData objects
            </summary>
            <param name="Label">This should be the same text as the dictionary key used to store this object which is what is displayed in ACT</param>
            <param name="DefaultVisible">If a column is visible in ACT by default(when first added to the configuration)</param>
            <param name="SqlDataType">The SQL data type such as INT, VARCHAR, FLOAT</param>
            <param name="SqlDataName">The SQL safe name of the column</param>
            <param name="CellDataCallback">The delegated method to be called to get back a string to display in ACT</param>
            <param name="SqlDataCallback">The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.</param>
            <param name="SortComparer">The comparison method to call to compare two CombatantData objects for sorting</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColumnDef.SqlDataType">
            <summary>
            The SQL data type such as INT, VARCHAR, FLOAT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColumnDef.SqlDataName">
            <summary>
            The SQL safe name of the column
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColumnDef.DefaultVisible">
            <summary>
            If a column is visible in ACT by default(when first added to the configuration)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColumnDef.Label">
            <summary>
            This should be the same text as the dictionary key used to store this object which is what is displayed in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.ColumnDefs">
            <summary>
            A collection of column definitions that may appear in tables
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.OutgoingDamageTypeDataObjects">
            <summary>
            The DamageTypeData objects that are marked as outgoing events under a combatant and the Ally mod value that an action sorted there attributes
            IE, {"Melee (Out)", -1}  -1 is a negative ally action towards whom you are meleeing.
            The last element in this array is special and becomes the data object that holds a copy of ALL data, IE "All Outgoing (Ref)" is last for English EQ2
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.IncomingDamageTypeDataObjects">
            <summary>
            The DamageTypeData objects that are marked as incoming events under a combatant and the Ally mod value that an action sorted there attributes
            IE, {"Incoming Damage", -1}  -1 is a negative ally action when someone damages you
            The last element in this array is special and becomes the data object that holds a copy of ALL data, IE "All Incoming (Ref)" is last for English EQ2
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.SwingTypeToDamageTypeDataLinksOutgoing">
            <summary>
            Linkings from a SwingType(int) to a list of DamageTypeData objects.
            For instance, SwingType 1(Melee) should go to "Melee (Out)" and "Outgoing Damage".
            Combat actions will always go to "All Outgoing (Ref)" without a defined link.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.SwingTypeToDamageTypeDataLinksIncoming">
            <summary>
            Linkings from a SwingType(int) to a list of DamageTypeData objects.
            Similar to SwingTypeToDamageTypeDataLinksOutgoing except that this filters to the victim's data, not the attacker's.
            For instance, SwingType 1(Melee) should go to "Incoming Damage".  SwingType 3(Healing) should go to "Healed (Inc)"
            Combat actions will always go to "All Incoming (Ref)" without a defined link.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.DamageSwingTypes">
            <summary>
            A collection of SwingTypes in a MasterSwing that may identify a hitpoint damage action
            For EQ2, this is 1 and 2 (AutoAttack &amp; AbilitySkill)
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.CombatantData.HealingSwingTypes">
            <summary>
            A collection of SwingTypes in a MasterSwing that may identify a hitpoint healing action
            For EQ2, this is 3 (Healing)
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.CombatantData.DamageTypeDef">
            <summary>
            Used in the creation of DamageTypeData rows(Outgoing/IncomingDamageTypeDataObjects) within a CombatantData object
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.DamageTypeDef.#ctor(System.String,System.Int32,System.Drawing.Color)">
            <summary>
            Used in the creation of DamageTypeData rows(Outgoing/IncomingDamageTypeDataObjects) within a CombatantData object
            </summary>
            <param name="Label">This should be the same text as the dictionary key used to store this object which is what is displayed in ACT</param>
            <param name="AllyValue">If an action sorted into this DamageTypeData is a positive(1), negative(-1) or neutral(0) action against the target</param>
            <param name="TypeColor">The color that will be used in things such as graphs for this DamageTypeData type</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DamageTypeDef.Label">
            <summary>
            This should be the same text as the dictionary key used to store this object which is what is displayed in ACT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DamageTypeDef.AllyValue">
            <summary>
            If an action sorted into this DamageTypeData is a positive(1), negative(-1) or neutral(0) action against the target
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DamageTypeDef.TypeColor">
            <summary>
            The color that will be used in things such as graphs for this DamageTypeData type
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.#ctor(System.String,Advanced_Combat_Tracker.EncounterData)">
            <summary>
            A data object representing a combatant within an encounter
            </summary>
            <param name="combatantName">The name of the combatant</param>
            <param name="Parent">The parent object</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.Trim">
            <summary>
            Removes excess array elements from child objects
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Parent">
            <summary>
            The EncounterData object that holds this
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetMaxHit(System.Boolean,System.Boolean)">
            <summary>
            Used for clipboard/mini window formatting {maxhit}
            </summary>
            <param name="ShowType">True = {maxhit}, false = {MAXHIT}; shows the skill name</param>
            <param name="UseSuffix">True = {maxhit-*}, false = {maxhit}; shortens the damage number with suffixes</param>
            <returns>The usable string</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetMaxHeal(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used for clipboard/mini window formatting {maxheal} and {maxhealward}
            </summary>
            <param name="ShowType">True = {maxheal}, false = {MAXHEAL}; shows the heal name</param>
            <param name="CountWards">If wards should be included for finding the largest heal. True = {maxhealward}</param>
            <param name="UseSuffix">True = {maxheal-*}, false = {maxheal}; shortens the damage number with suffixes</param>
            <returns>The usable string</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetCombatantType">
            <summary>
            Used for Encounter VCR combatant arranging
            </summary>
            <returns>0 = Non-ally, 1 = Tank, 2 = Healer, 3 = Melee DPS, 4 = All else</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetMaxHealth">
            <summary>
            Used for Encounter VCR... estimates how much health a combatant has based on the amount they took without dieing, factoring in heals.
            </summary>
            <returns>Unmodified value of how much they took without dieing</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColTypeCollection">
            <summary>
            Contains SQL column data types
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColHeaderCollection">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColHeaderString">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ColCollection">
            <summary>
            Contains SQL column data
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetColumnByName(System.String)">
            <summary>
            Gets the cell text for a given column
            </summary>
            <param name="name">The column name.  The possible names are the ones in the Table Setup tab of ACT, not the SQL column names.</param>
            <returns></returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetAttackType(System.String,System.String)">
            <summary>
            Gets an AttackType object from child objects
            </summary>
            <param name="AttackTypeName">The AttackType label</param>
            <param name="Type">Which DamageTypeData object to search.</param>
            <returns>Returns the found AttackType object or null if non-existing</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Deaths">
            <summary>
            How many times the combatant died
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Kills">
            <summary>
            Number of kills
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Name">
            <summary>
            Combatant name
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.StartTime">
            <summary>
            StartTime based on outgoing actions
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.EndTime">
            <summary>
            EndTime based on outgoing actions
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ShortEndTime">
            <summary>
            EndTime based on outgoing damage only
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.EncStartTime">
            <summary>
            The parent encounter's start time
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.EncEndTime">
            <summary>
            The parent encounter's end time
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Duration">
            <summary>
            From StartTime to EndTime, or in the case of merged data, the additions of each encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DurationS">
            <summary>
            Formatted duration string
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetThreatDelta(System.String)">
            <summary>
            The total threat delta outgoing
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.GetThreatStr(System.String)">
            <summary>
            Formatted threat totals outgoing
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Damage">
            <summary>
            Total damage
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DamagePercent">
            <summary>
            The amount of damage this combatant contributed compared to all it's allies (if this combatant is your ally)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.PowerReplenish">
            <summary>
            Power replenishments
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.PowerDamage">
            <summary>
            Power drain attacks
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Swings">
            <summary>
            Number of attacks from Outgoing Damage(DamageTypeData)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.CritHits">
            <summary>
            Number of critical hits from Outgoing Damage(DamageTypeData)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.CritDamPerc">
            <summary>
            String representation of the critical damage percentage rate
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.CritHealPerc">
            <summary>
            String representation of the critical heal percentage rate
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.CritHeals">
            <summary>
            Number of critical heals from Healed (Out)(DamageTypeData)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Heals">
            <summary>
            Number of times the combatant healed
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.CureDispels">
            <summary>
            Number of times the combatant cured or dispelled
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Hits">
            <summary>
            Number of successful attacks from Outgoing Damage(DamageTypeData)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Misses">
            <summary>
            Number of misses from Outgoing Damage(DamageTypeData)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Blocked">
            <summary>
            Number of non-miss failed attacks from Outgoing Damage(DamageTypeData)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.ToHit">
            <summary>
            Percentage of successful attacks
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DPS">
            <summary>
            Damage divided by the combatant's duration
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.EncDPS">
            <summary>
            Damage divided by the duration of the encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.EncHPS">
            <summary>
            Amount healed divided by the duration of the encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.DamageTaken">
            <summary>
            Amount of damage inflicted on this combatant
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Healed">
            <summary>
            Amount of damage healed on others or self
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.HealsTaken">
            <summary>
            Amount others or self healed this combatant
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.HealedPercent">
            <summary>
            Amount of hitpoints healed when compared to other allies(if your ally)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.AllOut">
            <summary>
            The AttackType child objects of this named DamageTypeData object
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.AllInc">
            <summary>
            The AttackType child objects of this named DamageTypeData object
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Items">
            <summary>
            DamageTypeData child objects
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.CombatantData.ModAlly(System.String,System.Int32)">
            <summary>
            Change the amount a combatant seems like an ally to the current combatant
            </summary>
            <param name="Combatant">The other combatant</param>
            <param name="Mod">Typically 1 for more positive, -1 for more negative</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.CombatantData.Tags">
            <summary>
            Arbitrary data you may assign to a CombatantData object
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterData">
            <summary>
            Data object representing an Encounter
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterData.ExportStringDataCallback">
            <summary>
            A signature used to accept a EncounterData object and return a string of data based on what the TextExportFormatter represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <param name="SelectiveAllies">A collection of CombatantData objects that data totals should be taken from (includes SelectiveParsing filtering)</param>
            <param name="ExtraFormat">A string that is extracted after a colon to specialize the output</param>
            <returns>The string that contains the data the TextExportFormatter represents for the EncounterData object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterData.TextExportFormatter">
            <summary>
            A text export definition for a EncounterData object
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.EncounterData.TextExportFormatter.GetExportString">
            <summary>
            A delegated method to be called to get back a string to be put into a text export
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.TextExportFormatter.#ctor(System.String,System.String,System.String,Advanced_Combat_Tracker.EncounterData.ExportStringDataCallback)">
            <summary>
            A text export definition for a EncounterData object
            </summary>
            <param name="Name">The simple name that represents the text export formatter, like {damage} or {dps}</param>
            <param name="Label">A friendly label for the text export formatter</param>
            <param name="Description">A decription of what the user should expect from the formatter</param>
            <param name="FormatterCallback">A delegated method to be called to get back a string to be put into a text export</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.TextExportFormatter.Label">
            <summary>
            A friendly label for the text export formatter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.TextExportFormatter.Description">
            <summary>
            A decription of what the user should expect from the formatter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.TextExportFormatter.Name">
            <summary>
            The simple name that represents the text export formatter, like {damage} or {dps}
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.EncounterData.ExportVariables">
            <summary>
            A collection of text export formatters that may be used in clipboard/mini-window/etc exports
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterData.StringDataCallback">
            <summary>
            A signature used to accept a EncounterData object and return a string of data based on what the ColumnDef represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <returns>The string that contains the data the ColumnDef represents for the EncounterData object</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterData.ColorDataCallback">
            <summary>
            A signature used to accept an EncounterData object and return a Fore/Back-color based on what the ColumnDef represents
            </summary>
            <param name="Data">The EncounterData object to retrieve data from</param>
            <returns>The color that should be used to highlight data</returns>
        </member>
        <member name="T:Advanced_Combat_Tracker.EncounterData.ColumnDef">
            <summary>
            A column defintion for EncounterData objects
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.EncounterData.ColumnDef.GetCellData">
            <summary>
            The delegated method to be called to get back a string to display in ACT
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.EncounterData.ColumnDef.GetSqlData">
            <summary>
            The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.EncounterData.ColumnDef.GetCellForeColor">
            <summary>
            The delegated method to be called to get the ForeColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.EncounterData.ColumnDef.GetCellBackColor">
            <summary>
            The delegated method to be called to get the BackColor of cell data, or Transparent for default
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.ColumnDef.#ctor(System.String,System.Boolean,System.String,System.String,Advanced_Combat_Tracker.EncounterData.StringDataCallback,Advanced_Combat_Tracker.EncounterData.StringDataCallback)">
            <summary>
            A column defintion for EncounterData objects
            </summary>
            <param name="Label">This should be the same text as the dictionary key used to store this object which is what is displayed in ACT</param>
            <param name="DefaultVisible">If a column is visible in ACT by default(when first added to the configuration)</param>
            <param name="SqlDataType">The SQL data type such as INT, VARCHAR, FLOAT</param>
            <param name="SqlDataName">The SQL safe name of the column</param>
            <param name="CellDataCallback">The delegated method to be called to get back a string to display in ACT</param>
            <param name="SqlDataCallback">The delegated method to be called to get back a string to be used as a data value in SQL.  Obviously this value must conform to the SqlDataType.</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColumnDef.SqlDataType">
            <summary>
            The SQL data type such as INT, VARCHAR, FLOAT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColumnDef.SqlDataName">
            <summary>
            The SQL safe name of the column
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColumnDef.DefaultVisible">
            <summary>
            If a column is visible in ACT by default(when first added to the configuration)
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColumnDef.Label">
            <summary>
            This should be the same text as the dictionary key used to store this object which is what is displayed in ACT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.DuplicateDetection">
            <summary>
            If enabled, AddCombatAction() will ignore actions with a Global Time Sorter that has been already added to this encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColTypeCollection">
            <summary>
            Contains SQL column data types
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColHeaderCollection">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColHeaderString">
            <summary>
            Contains SQL column names
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ColCollection">
            <summary>
            Contains SQL column data
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.#ctor(System.String,System.String,System.Boolean,Advanced_Combat_Tracker.ZoneData)">
            <summary>
            An encounter with full Selective Parsing enabled
            </summary>
            <param name="CharName">The first person perspective</param>
            <param name="ZoneName">The zone name the encounter takes place in</param>
            <param name="IgnoreEnemies">If Enemy combatants, ones attacking those in the Selective Parsing list, will have CombatantData entries made or not</param>
            <param name="Parent">The ZoneData object that contains this Encounter</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.#ctor(System.String,System.String,Advanced_Combat_Tracker.ZoneData)">
            <summary>
            An encounter without Selective Parsing enabled
            </summary>
            <param name="CharName">The first person perspective</param>
            <param name="ZoneName">The zone name the encounter takes place in</param>
            <param name="Parent">The ZoneData object that contains this Encounter</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.Trim">
            <summary>
            Trims unused array elements from all child objects, and their child objects
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.EndCombat(System.Boolean)">
            <summary>
            Mark this encounter as inactive.  Makes use of ActionDataLock.
            </summary>
            <param name="Finalize">Trim unused array elements and set the Title property</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Parent">
            <summary>
            The ZoneData parent holding this object
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.CharName">
            <summary>
            The first person perspective of this encounter, used for ally detection
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ZoneName">
            <summary>
            The name of the zone this Encounter took place in
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Active">
            <summary>
            If this Encounter is still in-combat
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.StartTimes">
            <summary>
            If a merged encounter, this will hold the start times of each merged, else the StartTime
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.EndTimes">
            <summary>
            If a merged encounter this will hold the end times of each merged, else the EndTime
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.SetAlliesUncached">
            <summary>
            Forces the next Ally detection to not use its cached value
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.SetAllies(System.Collections.Generic.List{Advanced_Combat_Tracker.CombatantData})">
            <summary>
            Sets the cached allies list
            </summary>
            <param name="allies">The list of allied combatants.  If null or empty, automatic ally detection will take over.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetAllies">
            <summary>
            Determines the allies of the first person perspective by referencing the positive and negative actions against them
            </summary>
            <returns>A list of CombatantData objects allied with the 1st person perspective, including that combatant</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetAllies(System.Boolean)">
            <summary>
            Determines the allies of the first person perspective by referencing the positive and negative actions against them
            </summary>
            <param name="allowLimited">If two calls come from the same second, if allowed, the cached value will be returned.</param>
            <returns>A list of CombatantData objects allied with the 1st person perspective, including that combatant</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetCombatant(System.String)">
            <summary>
            Gets the CombatantData object with the character name supplied
            </summary>
            <param name="Name">The name of the combatant</param>
            <returns>The CombatantData object, or null</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetEncounterSuccessLevel">
            <summary>
            Decides which color to use for encounter labels depending on how the encounter went.  
            </summary>
            <returns>The color the TreeView uses. 0 = Unknown; 1 = Success; 2 = Partial; 3 = Wipe</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetStrongestEnemy(System.String)">
            <summary>
            Gets the non-ally that took the most damage divided by the number of deaths it suffered
            </summary>
            <param name="combatant">The ally perspective to find enemies</param>
            <returns>The combatant's name</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetMaxHit(System.Boolean,System.Boolean)">
            <summary>
            Used for clipboard/mini window formatting {maxhit}
            </summary>
            <param name="ShowType">True = {maxhit}, false = {MAXHIT}; shows the skill name</param>
            <param name="UseSuffix">True = {maxhit-*}, false = {maxhit}; shortens the damage number with suffixes</param>
            <returns>The usable string</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetMaxHeal(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used for clipboard/mini window formatting {maxheal} and {maxhealward}
            </summary>
            <param name="ShowType">True = {maxheal}, false = {MAXHEAL}; shows the heal name</param>
            <param name="CountWards">If wards should be included for finding the largest heal. True = {maxhealward}</param>
            <param name="UseSuffix">True = {maxheal-*}, false = {maxheal}; shortens the damage number with suffixes</param>
            <returns>The usable string</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetIsSelective">
            <summary>
            Selective Parsing query
            </summary>
            <returns>If the encounter is using full Selective Parsing</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.GetIgnoreEnemies">
            <summary>
            Selective Parsing query
            </summary>
            <returns>If the encounter does not contain enemy combatants</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Title">
            <summary>
            What will be displayed as the title for the TreeView, not including duration/timestamp
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.StartTime">
            <summary>
            The first outgoing action of any combatant
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.EndTime">
            <summary>
            The last outgoing action of any combatant
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.ShortEndTime">
            <summary>
            The last outgoing non-heal of any combatant
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Duration">
            <summary>
            The duration of this encounter.  Merged encounters will be calculated from the StartTimes and EndTimes
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.DurationS">
            <summary>
            Formatted duration string
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Damage">
            <summary>
            Total damage of all allies
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.AlliedKills">
            <summary>
            Number of kills done by allies
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.AlliedDeaths">
            <summary>
            Number of deaths your allies suffered
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Healed">
            <summary>
            Amount healed by allies
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.DPS">
            <summary>
            The ExtDPS of all allies
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.EncId">
            <summary>
            A hash ID of the encounter
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.NumCombatants">
            <summary>
            Number of CombatantData objects
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.NumAllies">
            <summary>
            Number of allied combatants
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.NumEnemies">
            <summary>
            Number of combatants minus allies
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Items">
            <summary>
            CombatantData child objects
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.LogLines">
            <summary>
            The Encounter Logs
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.EncounterData.ToString">
            <summary>
            Gets the formatted title of this encounter
            </summary>
            <returns>The Title property and duration/timestamp</returns>
        </member>
        <member name="P:Advanced_Combat_Tracker.EncounterData.Tags">
            <summary>
            Arbitrary data you may assign to a EncounterData object
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ZoneData">
            <summary>
            A data object representing a collection of encounters split up by which zone they were in
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ZoneData.#ctor(System.DateTime,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A data object representing a collection of encounters split up by which zone they were in
            </summary>
            <param name="Start">Either when zoned into, or when the first encounter of the zone started</param>
            <param name="ZoneName">The string of the zone's name</param>
            <param name="PopulateAll">If an "All" merged encounter should be automatically created</param>
            <param name="FullSelective">If the automatically created "All" merged encounter needs to use Selective Parsing</param>
            <param name="IgnoreEnemies">If the "All" encounter does not populate enemies</param>
        </member>
        <member name="P:Advanced_Combat_Tracker.ZoneData.PopulateAll">
            <summary>
            If an "All" merged encounter is generated
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ZoneData.StartTime">
            <summary>
            When the first child encounter was created, or possibly when zoned into
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ZoneData.ZoneName">
            <summary>
            Name of the zone this object is created for
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ZoneData.Items">
            <summary>
            The child encounters this object contains
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ZoneData.ActiveEncounter">
            <summary>
            The current or last active encounter of the zone.  New combat data is usually directed here
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.ZoneData.Tags">
            <summary>
            Arbitrary data you may assign to a ZoneData object
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.ShowAlliesWindow(Advanced_Combat_Tracker.EncounterData,System.Windows.Forms.TreeNode)">
            <summary>
            Shows a window in which you can edit the allies cache of a completed encounter.
            </summary>
            <param name="encounter">The encounter to edit the allies of</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormAlliesEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAlliesEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAvoidanceReport.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAvoidanceReport.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAvoidanceReport.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAvoidanceReport.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormAvoidanceReport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAvoidanceReport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormAvoidanceReport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormExportFormat.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormExportFormat.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormExportFormat.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormExportFormat.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormExportFormat.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormExportFormat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormExportFormat.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimersPanel.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimersPanel.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimersPanel.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimersPanel.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormSpellTimersPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimersPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimersPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormXmlSettingsIO.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormXmlSettingsIO.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormXmlSettingsIO.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormXmlSettingsIO.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormXmlSettingsIO.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormXmlSettingsIO.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormXmlSettingsIO.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormTimeLine.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormTimeLine.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormTimeLine.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormTimeLine.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormTimeLine.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormTimeLine.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormTimeLine.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.ShowVcr(Advanced_Combat_Tracker.EncounterData,System.Boolean)">
            <summary>
            Show the Encounter VCR and populate data
            </summary>
            <param name="Encounter">The encounter object the VCR draws off of</param>
            <param name="Linked">If the passed encounter is currently in progress and the VCR should play things back as they happen starting from the end</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormEncounterVcr.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterVcr.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSqlQuery.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSqlQuery.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSqlQuery.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSqlQuery.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormSqlQuery.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSqlQuery.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSqlQuery.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.ShowLookup(System.String,Advanced_Combat_Tracker.DamageTypeData)">
            <summary>
            Provides a differently split of view of data than is shown normally in ACT (Per person instead of per skill name)
            </summary>
            <param name="title">The source of data</param>
            <param name="dtInput">The data source</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormByCombatantLookup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormByCombatantLookup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormStartupWizard.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormStartupWizard.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormStartupWizard.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormStartupWizard.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormStartupWizard.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormStartupWizard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormStartupWizard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormMiniParse">
            <summary>
            Summary description for FormMiniParse.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormMiniParse.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormMiniParse.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormMiniParse.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormMiniParse.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormMiniParse.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormMiniParse.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormMiniParse.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormUpdater">
            <summary>
            Summary description for FormUpdater.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormUpdater.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormUpdater.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormUpdater.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormUpdater.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormUpdater.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormUpdater.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormCombatantSearch">
            <summary>
            Summary description for FormCombatantSearch.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormCombatantSearch.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCombatantSearch.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCombatantSearch.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCombatantSearch.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCombatantSearch.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCombatantSearch.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormCombatantSearch.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormResistsDeathReport">
            <summary>
            Summary description for FormResistsDeathReport.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormResistsDeathReport.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormResistsDeathReport.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormResistsDeathReport.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormResistsDeathReport.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormResistsDeathReport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormResistsDeathReport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormSpellRecastCalc">
            <summary>
            Summary description for FormSpellRecastCalc.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellRecastCalc.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellRecastCalc.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellRecastCalc.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellRecastCalc.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellRecastCalc.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellRecastCalc.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormSpellTimers">
            <summary>
            Summary description for FormSpellTimers.
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormSpellTimers.OnSpellTimerNotify">
            <summary>
            Called when a spell timer is created, restarted, or has a DoT tick applied.  In other words, any time the window is notified about a spell it is actively keeping track of.  
            If you need to know if the event is called off of a start/restart or a DoT tick, check the MasterTimer property of the last SpellTimer in TimerFrame.SpellTimers.  
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormSpellTimers.OnSpellTimerWarning">
            <summary>
            Called when a spell timer reaches its defined warning value; usually 10 seconds
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormSpellTimers.OnSpellTimerExpire">
            <summary>
            Called when a spell timer reaches zero
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormSpellTimers.OnSpellTimerRemoved">
            <summary>
            Called when a spell timer is removed from view; usually at -15 seconds
            </summary>
        </member>
        <member name="E:Advanced_Combat_Tracker.FormSpellTimers.OnSpellTimerImageRefreshed">
            <summary>
            Occurs when the Spell Timers window changes images.
            This may occur after a window resize as well.
            The "sender" will be the picture box being drawn
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormSpellTimers.TimerMods">
            <summary>
            Collection of active timer modifications.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormSpellTimers.TimerLookups">
            <summary>
            Cached lookups of spell timer objects for triggering timers during parsing.  (Gets populated by RebuildSpellTreeView())
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormSpellTimers.TimerDefs">
            <summary>
            Collection of spell timer objects that get loaded and saved by ACT
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormSpellTimers.WhiteList">
            <summary>
            List of players that will trigger timers that are restricted to certain people
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.ClearTimerDefs">
            <summary>
            Deletes all spell timer objects
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.SearchSpellTreeView(System.String)">
            <summary>
            Displays the spell timers that match the SearchTerm in the TreeView UI
            </summary>
            <param name="SearchTerm">This will be searched for in the spell name and tooltip</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.RebuildSpellTreeView">
            <summary>
            Must be called after using AddEditTimerDef()... call only once per batch of objects
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.AddEditTimerDef(Advanced_Combat_Tracker.TimerData)">
            <summary>
            Adds a TimerData object to the TimerDefs collection, or replaces an existing object if the keys end up matching.
            Call RebuildSpellTreeView() after using this or the UI and TimerLookups won't be sync'ed
            </summary>
            <param name="newTd"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.RemoveTimerDef(Advanced_Combat_Tracker.TimerData)">
            <summary>
            Removes a TimerData object from the TimerDefs collection
            Call RebuildSpellTreeView() after using this or the UI and TimerLookups won't be sync'ed
            </summary>
            <param name="oldTd"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.ApplyTimerMod(System.String,System.String,System.String,System.Single,System.Int32)">
            <summary>
            Applies a recast mod to new timers
            </summary>
            <param name="Attacker">User of the recast mod skill</param>
            <param name="Victim">Who is affected by the recast mod</param>
            <param name="ModName">Name of the mod skill</param>
            <param name="RecastMod">The amount to mod (50% = 0.50F)</param>
            <param name="EffectDuration">Duration of the effect</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.RemoveTimerMods(System.String)">
            <summary>
            Removes all recast mods owned by a combatant (in case of death)
            </summary>
            <param name="DebuffOwner">The owner of the to be removed mods</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.DispellTimerMods(System.String)">
            <summary>
            Removes all recast mods on a combatant (in case of dispell/cure)
            </summary>
            <param name="DebuffTarget">The combatant to remove the recast mods from</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.NotifySpell(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Tells the Timer Window about a skill being used.  Preset recast mods will take effect through this method automatically.
            </summary>
            <param name="Attacker">Caster of skill</param>
            <param name="SpellName">Skill name</param>
            <param name="Self">If the skill landed or originated from the 1st person perspective</param>
            <param name="Victim">Destination of the skill</param>
            <param name="Success">If the skill landed.  In the case of TS not landing, a mod will not be applied for instance.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.GetRecastMods(System.String)">
            <summary>
            Gets the current recast mod amount for the specified combatant
            </summary>
            <param name="Caster">The combatant to query</param>
            <returns>Recast mod amount.  50% would return 0.5F</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormSpellTimers.GetTimerFrames(System.Int32)">
            <summary>
            Gets the timer frames currently visible in the spell timers windows
            </summary>
            <param name="PanelNum">0 for both, or 1 / 2</param>
            <returns>The TimerFrames for the specified panel</returns>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormSpellTimers.GenerateSpellTimerView">
            <summary>
            A replacable method which will alter display of the spell timer windows
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.FormEncounterLogs">
            <summary>
            Summary description for FormEncounterLogs.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormEncounterLogs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterLogs.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterLogs.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterLogs.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterLogs.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterLogs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormEncounterLogs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.FormEncounterLogs.LogTypeToColorMapping">
            <summary>
            Determines the colors shown for log lines in the window when compared to the detectedType from the parsing plugin.  
            If the key isn't defined, it is converted using Color.FromArgb(int)
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormPerformanceWizard.ImportControlTextXML(System.String)">
            <summary>
            Imports an XML file to replace the Text property of controls in this Form
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormPerformanceWizard.ImportControlTextXML(System.IO.Stream)">
            <summary>
            Imports an XML stream to replace the Text property of controls in this Form
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormPerformanceWizard.ExportControlTextXML(System.IO.Stream)">
            <summary>
            Export the Text property of all Form controls to an XML stream
            </summary>
            <param name="Output"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormPerformanceWizard.ExportControlTextXML(System.String)">
            <summary>
            Exports the Text property of all Form controls to an XML file  (the -exportcontroltext switch for ACT can demonstrate this)
            </summary>
            <param name="FilePath">The path the XML file to be written.</param>
        </member>
        <member name="F:Advanced_Combat_Tracker.FormPerformanceWizard.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormPerformanceWizard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.FormPerformanceWizard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.ListViewNoFlicker">
            <summary>
            A ListView that suppresses a lot of normal painting operations(flickering) when BeginUpdate/EndUpdate() is used.
            Call SetExStyles() after construction to enable anti-flicker.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ListViewNoFlicker.#ctor">
            <summary>
            A ListView that suppresses a lot of normal painting operations(flickering) when BeginUpdate/EndUpdate() is used.
            Call SetExStyles() after construction to enable anti-flicker.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ListViewNoFlicker.BeginUpdate">
            <summary>
            Call instead of ListView.BeginUpdate()
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ListViewNoFlicker.EndUpdate">
            <summary>
            Call instead of ListView.EndUpdate()
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ListViewNoFlicker.FlushUpdate">
            <summary>
            If an exception causes code execution to be orphaned, use this to end all previous BeginUpdates
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.ListViewNoFlicker.SetExStyles">
            <summary>
            Sets Double_Buffering / BorderSelect style and enables anti-flicker logic
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.act_bg3_15">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.back">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.camera_light">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.copy2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.dn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.n_">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.n0">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.n1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.paste2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.pasteicon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.reorder">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.screenshot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.Properties.Resources.x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Advanced_Combat_Tracker.SettingsSerializer">
            <summary>
            Store simple settings from controls into an XML element
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.#ctor(System.Object)">
            <summary>
            Store simple settings from controls into an XML element
            </summary>
            <param name="ParentSettingsClass">The class that owns the fields/properties to access through reflection.  Usually, "this".</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.AddStringSetting(System.String)">
            <summary>
            Add a String object to serialize
            </summary>
            <param name="SettingName">The field name to serialize</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.AddIntSetting(System.String)">
            <summary>
            Add an Int32 object to serialize
            </summary>
            <param name="SettingName">The field name to serialize</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.AddLongSetting(System.String)">
            <summary>
            Add an Int64 object to serialize
            </summary>
            <param name="SettingName">The field name to serialize</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.AddBooleanSetting(System.String)">
            <summary>
            Add a boolean object to serialize
            </summary>
            <param name="SettingName">The field name to serialize</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.AddDirectoryInfoSetting(System.String)">
            <summary>
            Add a DirectoryInfo object to serialize
            </summary>
            <param name="SettingName"></param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.AddControlSetting(System.String,System.Windows.Forms.Control)">
            <summary>
            Add a Control to serialize.
            Supported: CheckBox.Checked, RadioButton.Checked, NumericUpDown.Value, ListBox.Items(string[]), Panel.Width/Height, TextBox.Text
            Supported: ComboBox.Text(ComboBoxStyle.DropDown), Form.Left/Top/Width/Height, TrackBar.Value, CheckedListBox.Items(string[])/(ItemChecked)
            Supported: PictureBox.BackColor, Button.Text/Font
            </summary>
            <param name="ControlName">A unique identifier of the control.
            Visual Studio's IDE will often populate a Control.Name property that is suitable.</param>
            <param name="ControlToSerialize">An object reference of the control to serialize</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.ImportFromXml(System.Xml.XmlTextReader)">
            <summary>
            Import the serialized settings from the XML pull parser
            </summary>
            <param name="xReader">An XmlTextReader that has been advanced to the point where the current XML node contains all of the serialized settings</param>
            <returns>Number of exceptions thrown and logged</returns>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.FinializeComboBoxes">
            <summary>
            During deserialization of ComboBoxes they are temporarily set as DropDown style to select the old value.  This step returns all ComboBoxes to their original style and selects the correct index.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.SettingsSerializer.ExportToXml(System.Xml.XmlTextWriter)">
            <summary>
            Serializes all of the objects currently added to XML
            </summary>
            <param name="xWriter">An XmlTextWriter advanced to the point where it is safe to serialize
            IE, you cannot serialize to the XML root as the XML spec only allows one root element.
            When this method returns, you should be in the original XML node path.  Remember to properly end and flush the XML before closing.</param>
        </member>
        <member name="T:Advanced_Combat_Tracker.ThreadInvokes">
            <summary>
            A set of static methods that can perform a specific action on a Control that was not created on the current thread.
            If an invoke is not required, a normal action is taken.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.Options_XmlShare.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_XmlShare.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advanced_Combat_Tracker.Options_XmlShare.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.XmlSnippetEventArgs.ShareType">
            <summary>
            The XML node name... like Trigger, Spell, etc
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.XmlSnippetEventArgs.XmlAttributes">
            <summary>
            Collection of XML attribute names and values
            </summary>
        </member>
        <member name="P:Advanced_Combat_Tracker.XmlSnippetEventArgs.Handled">
            <summary>
            Set this so ACT knows something knows what the ShareType is
            </summary>
        </member>
        <member name="F:Advanced_Combat_Tracker.XmlSnippetEventArgs.RawXml">
            <summary>
            The original XML document as text
            </summary>
        </member>
        <member name="T:Transitions.IManagedType">
            <summary>
            Interface for all types we can perform transitions on. 
            Each type (e.g. int, double, Color) that we can perform a transition on 
            needs to have its own class that implements this interface. These classes 
            tell the transition system how to act on objects of that type.
            </summary>
        </member>
        <member name="M:Transitions.IManagedType.getManagedType">
            <summary>
            Returns the Type that the instance is managing.
            </summary>
        </member>
        <member name="M:Transitions.IManagedType.copy(System.Object)">
            <summary>
            Returns a deep copy of the object passed in. (In particular this is 
            needed for types that are objects.)
            </summary>
        </member>
        <member name="M:Transitions.IManagedType.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns an object holding the value between the start and end corresponding
            to the percentage passed in. (Note: the percentage can be less than 0% or
            greater than 100%.)
            </summary>
        </member>
        <member name="M:Transitions.ITransitionType.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Called by the Transition framework when its timer ticks to pass in the
            time (in ms) since the transition started. 
            
            You should return (in an out parameter) the percentage movement towards 
            the destination value for the time passed in. Note: this does not need to
            be a smooth transition from 0% to 100%. You can overshoot with values
            greater than 100% or undershoot if you need to (for example, to have some
            form of "elasticity").
            
            The percentage should be returned as (for example) 0.1 for 10%.
            
            You should return (in an out parameter) whether the transition has completed.
            (This may not be at the same time as the percentage has moved to 100%.)
            </summary>
        </member>
        <member name="T:Transitions.ManagedType_Color">
            <summary>
            Class that manages transitions for Color properties. For these we
            need to transition the R, G, B and A sub-properties independently.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Color.getManagedType">
            <summary>
            Returns the type we are managing.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Color.copy(System.Object)">
            <summary>
            Returns a copy of the color object passed in.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Color.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Creates an intermediate value for the colors depending on the percentage passed in.
            </summary>
        </member>
        <member name="T:Transitions.ManagedType_Double">
            <summary>
            Manages transitions for double properties.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Double.getManagedType">
            <summary>
             Returns the type managed by this class.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Double.copy(System.Object)">
            <summary>
            Returns a copy of the double passed in.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Double.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns the value between start and end for the percentage passed in.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Float.getManagedType">
            <summary>
            Returns the type we're managing.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Float.copy(System.Object)">
            <summary>
            Returns a copy of the float passed in.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Float.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns the interpolated value for the percentage passed in.
            </summary>
        </member>
        <member name="T:Transitions.ManagedType_Int">
            <summary>
            Manages transitions for int properties.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Int.getManagedType">
            <summary>
            Returns the type we are managing.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Int.copy(System.Object)">
            <summary>
            Returns a copy of the int passed in.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_Int.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns the value between the start and end for the percentage passed in.
            </summary>
        </member>
        <member name="T:Transitions.ManagedType_String">
            <summary>
            Manages transitions for strings. This doesn't make as much sense as transitions
            on other types, but I like the way it looks!
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_String.getManagedType">
            <summary>
            Returns the type we're managing.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_String.copy(System.Object)">
            <summary>
            Returns a copy of the string passed in.
            </summary>
        </member>
        <member name="M:Transitions.ManagedType_String.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns an "interpolated" string.
            </summary>
        </member>
        <member name="T:Transitions.Transition">
            <summary>
            Lets you perform animated transitions of properties on arbitrary objects. These 
            will often be transitions of UI properties, for example an animated fade-in of 
            a UI object, or an animated move of a UI object from one position to another.
            
            Each transition can simulataneously change multiple properties, including properties
            across multiple objects.
            
            Example transition
            ------------------
            a.      Transition t = new Transition(new TransitionMethod_Linear(500));
            b.      t.add(form1, "Width", 500);
            c.      t.add(form1, "BackColor", Color.Red);
            d.      t.run();
              
            Line a:         Creates a new transition. You specify the transition method.
                            
            Lines b. and c: Set the destination values of the properties you are animating.
            
            Line d:         Starts the transition.
            
            Transition methods
            ------------------
            TransitionMethod objects specify how the transition is made. Examples include
            linear transition, ease-in-ease-out and so on. Different transition methods may
            need different parameters.
            
            </summary>
        </member>
        <member name="M:Transitions.Transition.#cctor">
            <summary>
            You should register all managed-types here.
            </summary>
        </member>
        <member name="T:Transitions.Transition.Args">
            <summary>
            Args passed with the TransitionCompletedEvent.
            </summary>
        </member>
        <member name="E:Transitions.Transition.TransitionCompletedEvent">
            <summary>
            Event raised when the transition hass completed.
            </summary>
        </member>
        <member name="M:Transitions.Transition.run(System.Object,System.String,System.Object,Transitions.ITransitionType)">
            <summary>
            Creates and immediately runs a transition on the property passed in.
            </summary>
        </member>
        <member name="M:Transitions.Transition.run(System.Object,System.String,System.Object,System.Object,Transitions.ITransitionType)">
            <summary>
            Sets the property passed in to the initial value passed in, then creates and 
            immediately runs a transition on it.
            </summary>
        </member>
        <member name="M:Transitions.Transition.runChain(Transitions.Transition[])">
            <summary>
            Creates a TransitionChain and runs it.
            </summary>
        </member>
        <member name="M:Transitions.Transition.#ctor(Transitions.ITransitionType)">
            <summary>
            Constructor. You pass in the object that holds the properties 
            that you are performing transitions on.
            </summary>
        </member>
        <member name="M:Transitions.Transition.add(System.Object,System.String,System.Object)">
            <summary>
            Adds a property that should be animated as part of this transition.
            </summary>
        </member>
        <member name="M:Transitions.Transition.run">
            <summary>
            Starts the transition.
            </summary>
        </member>
        <member name="P:Transitions.Transition.TransitionedProperties">
            <summary>
            Property that returns a list of information about each property managed
            by this transition.
            </summary>
        </member>
        <member name="M:Transitions.Transition.removeProperty(Transitions.Transition.TransitionedPropertyInfo)">
            <summary>
            We remove the property with the info passed in from the transition.
            </summary>
        </member>
        <member name="M:Transitions.Transition.onTimer">
            <summary>
            Called when the transition timer ticks.
            </summary>
        </member>
        <member name="M:Transitions.Transition.setProperty(System.Object,Transitions.Transition.PropertyUpdateArgs)">
            <summary>
            Sets a property on the object passed in to the value passed in. This method
            invokes itself on the GUI thread if the property is being invoked on a GUI 
            object.
            </summary>
        </member>
        <member name="M:Transitions.Transition.isDisposed(System.Object)">
            <summary>
            Returns true if the object passed in is a Control and is disposed
            or in the process of disposing. (If this is the case, we don't want
            to make any changes to its properties.)
            </summary>
        </member>
        <member name="M:Transitions.Transition.registerType(Transitions.IManagedType)">
            <summary>
            Registers a transition-type. We hold them in a map.
            </summary>
        </member>
        <member name="M:Transitions.TransitionChain.runNextTransition">
            <summary>
            Runs the next transition in the list.
            </summary>
        </member>
        <member name="M:Transitions.TransitionChain.onTransitionCompleted(System.Object,Transitions.Transition.Args)">
            <summary>
            Called when the transition we have just run has completed.
            </summary>
        </member>
        <member name="M:Transitions.TransitionElement.#ctor(System.Double,System.Double,Transitions.InterpolationMethod)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Transitions.TransitionElement.EndTime">
            <summary>
            The percentage of elapsed time, expressed as (for example) 75 for 75%.
            </summary>
        </member>
        <member name="P:Transitions.TransitionElement.EndValue">
            <summary>
            The value of the animated properties at the EndTime. This is the percentage 
            movement of the properties between their start and end values. This should
            be expressed as (for example) 75 for 75%.
            </summary>
        </member>
        <member name="P:Transitions.TransitionElement.InterpolationMethod">
            <summary>
            The interpolation method to use when moving between the previous value
            and the current one.
            </summary>
        </member>
        <member name="T:Transitions.TransitionManager">
            <summary>
            This class is responsible for running transitions. It holds the timer that
            triggers transaction animation. 
            </summary><remarks>
            This class is a singleton.
            
            We manage the transaction timer here so that we can have a single timer
            across all transactions. If each transaction has its own timer, this creates
            one thread for each transaction, and this can lead to too many threads in
            an application.
            
            This class essentially just manages the timer for the transitions. It calls 
            back into the running transitions, which do the actual work of the transition.
            
            </remarks>
        </member>
        <member name="M:Transitions.TransitionManager.getInstance">
            <summary>
            Singleton's getInstance method.
            </summary>
        </member>
        <member name="M:Transitions.TransitionManager.register(Transitions.Transition)">
            <summary>
            You register a transition with the manager here. This will start to run
            the transition as the manager's timer ticks.
            </summary>
        </member>
        <member name="M:Transitions.TransitionManager.removeDuplicates(Transitions.Transition)">
            <summary>
            Checks if any existing transitions are acting on the same properties as the
            transition passed in. If so, we remove the duplicated properties from the 
            older transitions.
            </summary>
        </member>
        <member name="M:Transitions.TransitionManager.removeDuplicates(Transitions.Transition,Transitions.Transition)">
            <summary>
            Finds any properties in the old-transition that are also in the new one,
            and removes them from the old one.
            </summary>
        </member>
        <member name="M:Transitions.TransitionManager.#ctor">
            <summary>
            Private constructor (for singleton).
            </summary>
        </member>
        <member name="M:Transitions.TransitionManager.onTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when the timer ticks.
            </summary>
        </member>
        <member name="M:Transitions.TransitionManager.onTransitionCompleted(System.Object,Transitions.Transition.Args)">
            <summary>
            Called when a transition has completed. 
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_Acceleration">
            <summary>
            Manages transitions under constant acceleration from a standing start.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Acceleration.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Acceleration.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Works out the percentage completed given the time passed in.
            This uses the formula:
              s = ut + 1/2at^2
            The initial velocity is 0, and the acceleration to get to 1.0
            at t=1.0 is 2, so the formula just becomes:
              s = t^2
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_Bounce">
            <summary>
            This transition bounces the property to a destination value and back to the
            original value. It is accelerated to the destination and then decelerated back
            as if being dropped with gravity and bouncing back against gravity.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Bounce.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the total time taken for the bounce.
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_CriticalDamping">
            <summary>
            This transition animates with an exponential decay. This has a damping effect
            similar to the motion of a needle on an electomagnetically controlled dial.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_CriticalDamping.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_CriticalDamping.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_Deceleration">
            <summary>
            Manages a transition starting from a high speed and decelerating to zero by
            the end of the transition.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Deceleration.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Deceleration.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Works out the percentage completed given the time passed in.
            This uses the formula:
              s = ut + 1/2at^2
            The initial velocity is 2, and the acceleration to get to 1.0
            at t=1.0 is -2, so the formula becomes:
              s = t(2-t)
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_EaseInEaseOut">
            <summary>
            Manages an ease-in-ease-out transition. This accelerates during the first 
            half of the transition, and then decelerates during the second half.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_EaseInEaseOut.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_EaseInEaseOut.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Works out the percentage completed given the time passed in.
            This uses the formula:
              s = ut + 1/2at^2
            We accelerate as at the rate needed (a=4) to get to 0.5 at t=0.5, and
            then decelerate at the same rate to end up at 1.0 at t=1.0.
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_Flash">
            <summary>
            This transition type 'flashes' the properties a specified number of times, ending
            up by reverting them to their initial values. You specify the number of bounces and
            the length of each bounce. 
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Flash.#ctor(System.Int32,System.Int32)">
            <summary>
            You specify the number of bounces and the time taken for each bounce.
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_Linear">
            <summary>
            This class manages a linear transition. The percentage complete for the transition
            increases linearly with time.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Linear.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time (in milliseconds) that the
            transition will take.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_Linear.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            We return the percentage completed.
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_ThrowAndCatch">
            <summary>
            This transition bounces the property to a destination value and back to the
            original value. It is decelerated to the destination and then acclerated back
            as if being thrown against gravity and then descending back with gravity.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_ThrowAndCatch.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the total time taken for the bounce.
            </summary>
        </member>
        <member name="T:Transitions.TransitionType_UserDefined">
            <summary>
            This class allows you to create user-defined transition types. You specify these
            as a list of TransitionElements. Each of these defines: 
            End time , End value, Interpolation method
            
            For example, say you want to make a bouncing effect with a decay:
            
            EndTime%    EndValue%   Interpolation
            --------    ---------   -------------
            50          100         Acceleration 
            75          50          Deceleration
            85          100         Acceleration
            91          75          Deceleration
            95          100         Acceleration
            98          90          Deceleration
            100         100         Acceleration
            
            The time values are expressed as a percentage of the overall transition time. This 
            means that you can create a user-defined transition-type and then use it for transitions
            of different lengths.
            
            The values are percentages of the values between the start and end values of the properties
            being animated in the transitions. 0% is the start value and 100% is the end value.
            
            The interpolation is one of the values from the InterpolationMethod enum.
            
            So the example above accelerates to the destination (as if under gravity) by
            t=50%, then bounces back up to half the initial height by t=75%, slowing down 
            (as if against gravity) before falling down again and bouncing to decreasing 
            heights each time.
            
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_UserDefined.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_UserDefined.#ctor(System.Collections.Generic.IList{Transitions.TransitionElement},System.Int32)">
            <summary>
            Constructor. You pass in the list of TransitionElements and the total time
            (in milliseconds) for the transition.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_UserDefined.setup(System.Collections.Generic.IList{Transitions.TransitionElement},System.Int32)">
            <summary>
            Sets up the transitions. 
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_UserDefined.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Called to find the value for the movement of properties for the time passed in.
            </summary>
        </member>
        <member name="M:Transitions.TransitionType_UserDefined.getElementInfo(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,Transitions.InterpolationMethod@)">
            <summary>
            Returns the element info for the time-fraction passed in. 
            </summary>
        </member>
        <member name="T:Transitions.Utility">
            <summary>
            A class holding static utility functions.
            </summary>
        </member>
        <member name="M:Transitions.Utility.getValue(System.Object,System.String)">
            <summary>
            Returns the value of the property passed in.
            </summary>
        </member>
        <member name="M:Transitions.Utility.setValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property passed in.
            </summary>
        </member>
        <member name="M:Transitions.Utility.interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Returns a value between d1 and d2 for the percentage passed in.
            </summary>
        </member>
        <member name="M:Transitions.Utility.interpolate(System.Int32,System.Int32,System.Double)">
            <summary>
            Returns a value betweeen i1 and i2 for the percentage passed in.
            </summary>
        </member>
        <member name="M:Transitions.Utility.interpolate(System.Single,System.Single,System.Double)">
            <summary>
            Returns a value betweeen f1 and f2 for the percentage passed in.
            </summary>
        </member>
        <member name="M:Transitions.Utility.convertLinearToEaseInEaseOut(System.Double)">
            <summary>
            Converts a fraction representing linear time to a fraction representing
            the distance traveled under an ease-in-ease-out transition.
            </summary>
        </member>
        <member name="M:Transitions.Utility.convertLinearToAcceleration(System.Double)">
            <summary>
            Converts a fraction representing linear time to a fraction representing
            the distance traveled under a constant acceleration transition.
            </summary>
        </member>
        <member name="M:Transitions.Utility.convertLinearToDeceleration(System.Double)">
            <summary>
            Converts a fraction representing linear time to a fraction representing
            the distance traveled under a constant deceleration transition.
            </summary>
        </member>
        <member name="M:Transitions.Utility.raiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Fires the event passed in in a thread-safe way. 
            </summary><remarks>
            This method loops through the targets of the event and invokes each in turn. If the
            target supports ISychronizeInvoke (such as forms or controls) and is set to run 
            on a different thread, then we call BeginInvoke to marshal the event to the target
            thread. If the target does not support this interface (such as most non-form classes)
            or we are on the same thread as the target, then the event is fired on the same
            thread as this is called from.
            </remarks>
        </member>
    </members>
</doc>
